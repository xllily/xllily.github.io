<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Automatically Disable Touchpad When External Mouse Is Connected (Ubuntu)</title>
    <url>/2020/04/08/Automatically-Disable-Touchpad-When-External-Mouse-Is-Connected-Ubuntu/</url>
    <content><![CDATA[<blockquote>
<p>When I want to set <code>Touchpad</code> to automatically switch the “disabled” or “enabled” according to whether an external mouse is currently connected, but I failed to find the settings that can be achieved in <code>Settings</code> &gt; <code>Devices</code> &gt; <code>Mouse &amp; Touchpad</code></p>
</blockquote>
<p>Found a high-quality answer from awesome guy <strong><em>Jacob Vlijm</em></strong> : <a href="https://askubuntu.com/a/787434/957585" target="_blank" rel="noopener">Reference</a></p>
<a id="more"></a>
<h1 id="Edit-Aliases"><a href="#Edit-Aliases" class="headerlink" title="Edit Aliases"></a>Edit Aliases</h1><p>Add some aliases like following content in <code>~/.bash_aliases</code></p>
<p>E.g：</p>
<blockquote>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> touchpad:status=<span class="string">"gsettings get org.gnome.desktop.peripherals.touchpad send-events"</span></span><br><span class="line"><span class="built_in">alias</span> touchpad:on=<span class="string">"gsettings set org.gnome.desktop.peripherals.touchpad send-events enabled"</span></span><br><span class="line"><span class="built_in">alias</span> touchpad:off=<span class="string">"gsettings set org.gnome.desktop.peripherals.touchpad send-events disabled"</span></span><br><span class="line"><span class="built_in">alias</span> touchpad:auto=<span class="string">"gsettings set org.gnome.desktop.peripherals.touchpad send-events disabled-on-external-mouse"</span></span><br></pre></td></tr></table></figure>
<p>After saving, execute</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_aliases</span><br></pre></td></tr></table></figure>
<h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><h2 id="view-current-status-of-the-touchpad"><a href="#view-current-status-of-the-touchpad" class="headerlink" title="view current status of the touchpad"></a>view current status of the touchpad</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touchpad:status</span><br><span class="line"></span><br><span class="line"><span class="comment"># will output: 'enabled' | 'disabled' | 'disabled-on-external-mouse'</span></span><br></pre></td></tr></table></figure>
<h2 id="turn-on"><a href="#turn-on" class="headerlink" title="turn on"></a>turn on</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touchpad:on</span><br></pre></td></tr></table></figure>
<h2 id="turn-off"><a href="#turn-off" class="headerlink" title="turn off"></a>turn off</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touchpad:off</span><br></pre></td></tr></table></figure>
<h2 id="auto-switching"><a href="#auto-switching" class="headerlink" title="auto switching"></a>auto switching</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touchpad:auto</span><br><span class="line"></span><br><span class="line"><span class="comment"># automatically disable touchpad when mouse connected and enable touchpad when mouse disconnected</span></span><br></pre></td></tr></table></figure>
<h1 id="🔓"><a href="#🔓" class="headerlink" title="🔓"></a>🔓</h1><p>Done！ O(∩ _ ∩)O~</p>
]]></content>
      <categories>
        <category>Learn A Bit</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 指北</title>
    <url>/2021/08/13/Git-Guide/</url>
    <content><![CDATA[<blockquote>
<p>本指南暂不包含 <code>fetch</code> , <code>pull</code>, <code>push</code>, <code>clone</code> 等 Git 版本库操作和 <code>CI/CD</code> 工作流搭建等</p>
</blockquote>
<h2 id="一、版本规范："><a href="#一、版本规范：" class="headerlink" title="一、版本规范："></a>一、版本规范：</h2><p>结合 <a href="https://semver.org/" target="_blank" rel="noopener">semver</a> 语义化版本以及 <a href="http://en.wikipedia.org/wiki/Software_release_life_cycle" target="_blank" rel="noopener">software release life cycle</a> 软件发布生命周期两块概念，约定 <code>git tag</code> 标签规则</p>
<h3 id="格式命名"><a href="#格式命名" class="headerlink" title="格式命名"></a>格式命名</h3><h4 id="基础版本格式："><a href="#基础版本格式：" class="headerlink" title="基础版本格式："></a>基础版本格式：</h4><p>   <code>&lt;主版本号&gt;.&lt;次版本号&gt;.&lt;修订版本号&gt;</code> 三位数字用 <code>.</code> 连接组成一个版本号，如 <code>1.0.0</code><br>   版本号数字递增规则：</p>
<ul>
<li><strong>主版本号</strong>：对代码进行了不向前兼容的修改</li>
<li><strong>次版本号</strong>：向前兼容的修改，只是新增了功能</li>
<li><strong>修订版本号</strong>：向前兼容的故障修复、需求细节变更<h4 id="细化版本格式："><a href="#细化版本格式：" class="headerlink" title="细化版本格式："></a>细化版本格式：</h4>在原来 <code>x.y.z</code> 基础版本号后面添加<code>软件生命周期</code>作为先行版本号，以及添加<code>附加信息（编译信息、时间戳、序号等）</code>来进一步细化控制版本</li>
<li><strong>先行版本号</strong>：表示在正式版之前发布的版本，并非稳定而且可能无法满足预期的兼容性需求，格式是标注在修订版之后，先加上一个连接号<code>-</code>, 再加上一连串以句点分隔的标识符来修饰, 。范例：<code>1.0.0-alpha.1</code>、<code>1.0.0-rc.22</code>、<code>1.0.0-beta.33</code> …<blockquote>
<p>常见的先行版本</p>
<ul>
<li><code>alpha</code>: 内测版本，通常提测至测试部</li>
<li><code>beta</code>: 公测版本，通常可以面向用户全量或者灰度发布</li>
<li><code>rc</code>: 即 <code>Release candiate</code>，正式版本的候选版本，用作预发布<br>注：这些版本的发布可能需要团队的工作流程以及部署环境的隔离去支撑</li>
</ul>
</blockquote>
</li>
<li><strong>版本编译信息</strong>: 可以在修订版或先行版本号之后，先加上一个加号再加上一连串以句点分隔的标识符来修饰。范例：<code>1.0.0+jested</code>、<code>1.0.0-alpha+001</code>、<code>1.0.0-rc+20130313144700</code>、<code>1.0.0-beta+exp.sha.5114f85</code>、<code>1.0.0-next+0</code>…</li>
</ul>
<h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建</span></span><br><span class="line">$ git tag -a <span class="string">"x.y.z-alpha+timestamp"</span> -m <span class="string">"summary..."</span></span><br><span class="line"><span class="comment"># 推送</span></span><br><span class="line">$ git push --tags</span><br></pre></td></tr></table></figure>
<h3 id="常用命令行"><a href="#常用命令行" class="headerlink" title="常用命令行:"></a>常用命令行:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &lt; xxx &gt; just means variable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List tags</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># Show details of the tag</span></span><br><span class="line">$ git show &lt;TAG Name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add tag to newest commit</span></span><br><span class="line">$ git tag &lt;TAG Name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add tag to specified commit</span></span><br><span class="line">$ git tag &lt;TAG Name&gt; &lt;Commit Hash ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove tag (local)</span></span><br><span class="line">$ git tag -d &lt;TAG Name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove tag (remote)</span></span><br><span class="line">$ git push &lt;Host Name&gt; :refs/tags/&lt;TAG Name&gt;</span><br><span class="line">$ git push &lt;Host Name&gt; :&lt;TAG Name&gt;</span><br><span class="line">$ git push --delete &lt;Host Name&gt; &lt;TAG Name&gt;</span><br><span class="line">$ git push -d &lt;Host Name&gt; &lt;TAG Name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Push specified tag to remote</span></span><br><span class="line">$ git push &lt;Host Name&gt; &lt;TAG Name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Push all tags to remote</span></span><br><span class="line">$ git push &lt;Host Name&gt; --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fetch all tags from remote</span></span><br><span class="line">$ git fetch --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a new branch from the TAG</span></span><br><span class="line">$ git checkout -b &lt;New Branch Name&gt; &lt;TAG Name&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="二、提交规范"><a href="#二、提交规范" class="headerlink" title="二、提交规范"></a>二、提交规范</h2><h3 id="提交人"><a href="#提交人" class="headerlink" title="提交人"></a>提交人</h3><p>根据团队约定，从项目维度上去设置&lt;用户名&gt;和&lt;邮箱&gt;,不影响开发着全局配置</p>
<h4 id="方法一：进入当前项目根目录，执行如下命令"><a href="#方法一：进入当前项目根目录，执行如下命令" class="headerlink" title="方法一：进入当前项目根目录，执行如下命令"></a>方法一：进入当前项目根目录，执行如下命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出全局配置信息</span></span><br><span class="line">$ git config --global -l</span><br><span class="line"><span class="comment"># 列出项目当前的配置信息，没有字段的将继承全局，相同的字段将优先于全局</span></span><br><span class="line">$ git config --<span class="built_in">local</span> -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置当前项目</span></span><br><span class="line">$ git config --<span class="built_in">local</span> user.name xxx</span><br><span class="line">$ git config --<span class="built_in">local</span> user.email xxx</span><br></pre></td></tr></table></figure>
<h4 id="方式二：-在当前项目根目录-git-config-配置文件中设置"><a href="#方式二：-在当前项目根目录-git-config-配置文件中设置" class="headerlink" title="方式二： 在当前项目根目录 .git/config 配置文件中设置"></a>方式二： 在当前项目根目录 <code>.git/config</code> 配置文件中设置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[user]</span><br><span class="line">name = xxx</span><br><span class="line">email = xxx</span><br></pre></td></tr></table></figure>
<h3 id="提交风格"><a href="#提交风格" class="headerlink" title="提交风格"></a>提交风格</h3><img src="/2021/08/13/Git-Guide/angular-commit-style.png" title="This is an angular-commit-style image">
<p>如上图为 <code>AngularJS</code> 开源仓库参考 <a href="https://google.github.io/styleguide/jsguide.html" target="_blank" rel="noopener">Google’s JavaScript Style Guide</a> 制定并使用的提交风格，目前前端开源生态普遍遵循。<br><strong>这样统一标准的提交好处是</strong>：</p>
<ul>
<li>降低 <code>Code Review</code> 成本</li>
<li>标准化结构化的提交消息文本格式，便于 <code>git log</code> 格式化打印输出日志如 <code>git log --format=&#39;%s (%h)&#39; --reverse --grep &#39;^\(feat\|fix\)&#39; --since=2020-01-01</code> 或者直接借助一些工具可自动化地“一键”生成 <code>Change Log</code></li>
<li>便于追溯历史时快速搜索过滤</li>
</ul>
<p><strong>提交的消息格式如下：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>每次提交可以包含页眉(<code>header</code>)、正文(<code>body</code>)和脚注(<code>footer</code>)</li>
<li>每次提交必须包含页眉内容，其他可选</li>
<li>每次提交的信息尽量不超过 <code>100</code> 个字符</li>
</ul>
<p><strong>具体说明文档：</strong></p>
<ul>
<li><a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#" target="_blank" rel="noopener">AngularJS Git Commit Message Conventions</a></li>
<li><a href="https://www.conventionalcommits.org/zh-hans/v1.0.0/" target="_blank" rel="noopener">conventionalcommits.org</a></li>
</ul>
<h3 id="Commit-vs-Issue"><a href="#Commit-vs-Issue" class="headerlink" title="Commit vs Issue"></a>Commit <strong><em>vs</em></strong> Issue</h3><h4 id="1-自有的Issue-系统事务操作"><a href="#1-自有的Issue-系统事务操作" class="headerlink" title="1. 自有的Issue 系统事务操作"></a>1. 自有的<code>Issue</code> 系统事务操作</h4><blockquote>
<p><code>Github</code> 、 <code>Gitlab</code> 等都提供了关键字，允许在提交 commit message 中通过声明关键字以及对应的 ISSUE- NUMBER 来操作事务</p>
</blockquote>
<h5 id="1-Github-关闭事务"><a href="#1-Github-关闭事务" class="headerlink" title="1) Github 关闭事务"></a>1) Github 关闭事务</h5><h6 id="keywords"><a href="#keywords" class="headerlink" title="keywords"></a>keywords</h6><ul>
<li><code>close</code>,<code>closes</code>,<code>closed</code>,<code>Close</code>,<code>Closes</code>,<code>Closed</code>,</li>
<li><code>fix</code>,<code>fixes</code>,<code>fixed</code>,<code>Fix</code>,<code>Fixes</code>,<code>Fixed</code></li>
<li><code>resolve</code>,<code>resolves</code>,<code>resolved</code>,<code>Resolve</code>,<code>Resolves</code>,<code>Resolved</code></li>
</ul>
<h6 id="syntax"><a href="#syntax" class="headerlink" title="syntax"></a>syntax</h6><ul>
<li>同一个仓库 <code>KEYWORD #ISSUE-NUMBER</code>, 如    <code>Closes #10</code></li>
<li>不同的仓库 <code>KEYWORD OWNER/REPOSITORY#ISSUE-NUMBER</code>, 如<code>Fixes octo-org/octo-repo#100</code></li>
<li>多个Issue <code>&lt;full syntax&gt;, &lt;full syntax&gt;, ...</code>, 如 <code>Resolves #10, fix #123, closes owner/octo-repo#100</code></li>
</ul>
<h5 id="2-Gitlab-关闭事务"><a href="#2-Gitlab-关闭事务" class="headerlink" title="2) Gitlab 关闭事务"></a>2) Gitlab 关闭事务</h5><h6 id="keywords-syntax-pattern"><a href="#keywords-syntax-pattern" class="headerlink" title="keywords syntax pattern"></a>keywords syntax pattern</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">\b((?:[Cc]los(?:e[sd]?|ing)|\b[Ff]ix(?:e[sd]|ing)?|\b[Rr]esolv(?:e[sd]?|ing)|\b[Ii]mplement(?:s|ed|ing)?)(:?) +(?:(?:issues? +)?%&#123;issue_ref&#125;(?:(?: *,? +and +| *,? *)?)|([A-Z][A-Z0<span class="number">-9</span>_]+-\d+))+)</span><br></pre></td></tr></table></figure>
<h6 id="all-keywords"><a href="#all-keywords" class="headerlink" title="all keywords"></a>all keywords</h6><ul>
<li><code>Close</code>, <code>Closes</code>, <code>Closed</code>, <code>Closing</code>, <code>close</code>, <code>closes</code>, <code>closed</code>, <code>closing</code></li>
<li><code>Fix</code>, <code>Fixes</code>, <code>Fixed</code>, <code>Fixing</code>, <code>fix</code>, <code>fixes</code>, <code>fixed</code>, <code>fixing</code></li>
<li><code>Resolve</code>, <code>Resolves</code>, <code>Resolved</code>, <code>Resolving</code>, <code>resolve</code>, <code>resolves</code>, <code>resolved</code>, <code>resolving</code></li>
<li><code>Implement</code>, <code>Implements</code>, <code>Implemented</code>, <code>Implementing</code>, <code>implement</code>, <code>implements</code>, <code>implemented</code>, <code>implementing</code></li>
</ul>
<h6 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h6><ul>
<li>当前项目仓库的 <code>issue</code> , 如 <code>close #123</code></li>
<li>组内跨仓库的 <code>issue</code>, 如 <code>fix group/project#123</code></li>
<li>直接链接其他仓库 <code>issue</code>, 如 <code>Resolve https://gitlab.example.com/group/project/issues/123</code></li>
</ul>
<h4 id="2-第三方事务管理系统"><a href="#2-第三方事务管理系统" class="headerlink" title="2. 第三方事务管理系统"></a>2. 第三方事务管理系统</h4><blockquote>
<p>Git 服务端推荐优先私有化部署 <a href="https://about.gitlab.com/" target="_blank" rel="noopener">GitLab</a> 以支持集成第三方事务管理系统<br>第三方事务管理系统可以是 Jira 、 禅道等</p>
<ul>
<li><a href="https://www.zentao.net/book//207.html" target="_blank" rel="noopener">禅道 与 GitLab 集成</a></li>
<li><a href="https://docs.gitlab.com/ee/integration/jira/" target="_blank" rel="noopener">Jira 与 GitLab 集成</a></li>
</ul>
</blockquote>
<p><code>Git</code> 可以与 <code>Jira</code> 、<code>禅道</code> 等第三方相互集成后，就可以同样通过<code>关键字</code>来直接操作事务，区别是操作的事务的编号将以第三方提供的信息为准</p>
<h3 id="提交操作"><a href="#提交操作" class="headerlink" title="提交操作"></a>提交操作</h3><h4 id="CLI-手动"><a href="#CLI-手动" class="headerlink" title="CLI 手动"></a>CLI 手动</h4><blockquote>
<p>以下适用于 Mac OS X (or Linux like Ubuntu)</p>
</blockquote>
<h5 id="1-准备一个-txt-作为提交模版"><a href="#1-准备一个-txt-作为提交模版" class="headerlink" title="1. 准备一个 *.txt 作为提交模版"></a>1. 准备一个 *.txt 作为提交模版</h5><p>打开 <a href="/files/git-commit-template.txt">template</a> 后另存为到本地，建议存放在 home 目录 <code>～/</code> 下, 并可选择性地重命名为 <code>.git-commit-template.txt</code> 隐藏文件</p>
<h5 id="2-Git-配置提交模版"><a href="#2-Git-配置提交模版" class="headerlink" title="2. Git 配置提交模版"></a>2. Git 配置提交模版</h5><p>直接运行命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global commit.template ～/.git-commit-template.txt</span><br></pre></td></tr></table></figure></p>
<p>或者在 <code>～/.gitconfig</code> 中编辑 <code>git</code> 配置项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[commit]</span><br><span class="line">template = ～/.git-commit-template.txt</span><br></pre></td></tr></table></figure>
<h5 id="3-Git-配置默认编辑器"><a href="#3-Git-配置默认编辑器" class="headerlink" title="3. Git 配置默认编辑器"></a>3. Git 配置默认编辑器</h5><p>配置默认 <code>git</code> 默认编辑器，建议同自己的代码编辑器，例如 <code>vscode</code>:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">editor = code -w  ( -w 参数必须 ，代表等待提交信息编辑完成)</span><br></pre></td></tr></table></figure></p>
<h5 id="test"><a href="#test" class="headerlink" title="test"></a>test</h5><p>在 Terminal 中 执行 <code>git commit</code> 回车，自动使用配置的默认编辑器调起配置好的“提交模版”<br><img src="/2021/08/13/Git-Guide/git-commit.gif" title="This is git-commit an image"></p>
<p>Done, 编写完提交信息文本保存后关闭则提交成功，如果未保存关闭则退出保存，提交成功可以 <code>git log</code> 查看提交信息, 也可以在 <code>push</code> 前， 通过 <code>git commit --amend</code> 堪误本次提交信息。</p>
<h4 id="CLI-脚本工具"><a href="#CLI-脚本工具" class="headerlink" title="CLI 脚本工具"></a>CLI 脚本工具</h4><ul>
<li><a href="https://www.npmjs.com/package/git-cz" target="_blank" rel="noopener">git-cz</a></li>
<li><a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noopener">conventional-changelog/commitlint</a></li>
<li>…</li>
</ul>
<h4 id="IDE-插件"><a href="#IDE-插件" class="headerlink" title="IDE 插件"></a>IDE 插件</h4><p>像 <code>IntelliJ IDEA</code> 此类集成 GIT 的开发环境，可以直接安装一些第三方插件，如</p>
<ul>
<li><a href="https://plugins.jetbrains.com/plugin/13389-conventional-commit" target="_blank" rel="noopener">plugin: conventional-commit</a></li>
<li><a href="https://plugins.jetbrains.com/plugin/13405-angular-conventional-commit" target="_blank" rel="noopener">plugin: angular-conventional-commit</a></li>
<li>…</li>
</ul>
<h2 id="三、发布管理"><a href="#三、发布管理" class="headerlink" title="三、发布管理"></a>三、发布管理</h2><h3 id="CHANGELOG-变更日志"><a href="#CHANGELOG-变更日志" class="headerlink" title="CHANGELOG 变更日志"></a>CHANGELOG 变更日志</h3><p><code>Change Log</code> 属于软件发布生命周期，面向内部协作。<br>在项目根目录书写 <code>CHANGELOG.md</code>，如：<br><img src="/2021/08/13/Git-Guide/changelog.png" title="This is an changelog image"><br>通常在遵循<strong>提交规范</strong>后，直接使用类似 <a href="https://github.com/conventional-changelog/conventional-changelog" target="_blank" rel="noopener">conventional-changelog</a> 这样的工具可以一键生成 <code>Change Log</code>。</p>
<h3 id="Release-Notes-发行说明"><a href="#Release-Notes-发行说明" class="headerlink" title="Release Notes 发行说明"></a>Release Notes 发行说明</h3><p>与 <code>Change Log</code> 同属于软件发布生命周期，区别是 <code>Release Notes</code>是面向外部交付的<br><code>Release Notes</code> 没有标准格式可循，通常根据要传播表达的信息的要求来采用定制化的格式样式。</p>
<p><strong>Release Notes 可能包括以下部分：</strong></p>
<ul>
<li><strong>Header</strong> – 文档名称（即发行说明）、产品名称、发行编号、发行日期、注释日期、注释版本等。</li>
<li><strong>概述</strong> - 在没有其他正式文档的情况下，对产品和更改的简要概述。</li>
<li><strong>目的</strong> - 简要概述发行说明的目的，并列出此版本中的新增功能，包括<a href="https://en.wikipedia.org/wiki/Bug_fix" target="_blank" rel="noopener">错误修复</a>和新功能。</li>
<li><strong>问题摘要</strong> - 对该版本中的错误或增强功能的简短描述。</li>
<li><strong>重现步骤</strong> - 遇到错误时遵循的步骤。</li>
<li><strong>解决方案</strong> - 为修复错误而进行的修改/增强的简短描述。</li>
<li><strong>最终用户影响</strong> - 应用程序的最终用户需要哪些不同的操作。这应该包括其他功能是否受到这些更改的影响。</li>
<li><strong>支持影响</strong> - 管理软件的日常过程中所需的更改。</li>
<li><strong>注释</strong> - 有关软件或硬件<a href="https://en.wikipedia.org/wiki/Installation_(computer_programs" target="_blank" rel="noopener">安装</a>)、升级和产品文档（包括文档更新）的注释</li>
<li><strong>免责声明</strong> - 公司和标准产品相关信息。例如; <a href="https://en.wikipedia.org/wiki/Freeware" target="_blank" rel="noopener">免费软件</a>、<a href="https://en.wikipedia.org/wiki/Copy_protection#Anti-piracy" target="_blank" rel="noopener">反盗版</a>、复制等。另见<a href="https://en.wikipedia.org/wiki/Disclaimer" target="_blank" rel="noopener">免责声明</a>。</li>
<li><strong>联系</strong> - 支持联系信息</li>
</ul>
<p><code>GitLab</code> 和 <code>GitHub</code> 均将 <code>Release Notes</code> 功能集成在 <code>Tags</code> 中，当 <code>Tag</code> 推送到远程仓库，可以找到 Tag 对应的编辑按钮，在远程仓库直接在线编写 <code>Release Notes</code><br>如 <code>React</code> 版本库：<br><img src="/2021/08/13/Git-Guide/react-release-notes.png" title="This is an react-release-notes image"></p>
<p><strong>参考资料：</strong></p>
<ul>
<li><a href="https://github.com/facebook/react/releases" target="_blank" rel="noopener">ReactJs Release Notes</a></li>
<li><a href="http://maven.apache.org/release-notes-all.html" target="_blank" rel="noopener">Apache Maven Release Notes</a></li>
<li><a href="https://support.apple.com/en-us/HT211808" target="_blank" rel="noopener">iOS 14 Release Notes</a></li>
<li><a href="https://developer.apple.com/documentation/macos-release-notes" target="_blank" rel="noopener">macOS Release Notes</a></li>
<li><a href="https://developer.apple.com/documentation/xcode-release-notes/xcode-12_5-beta-release-notes/" target="_blank" rel="noopener">Xcode Release Notes</a></li>
<li><a href="https://www.kernel.org/doc/html/latest/admin-guide/README.html" target="_blank" rel="noopener">Linux code Release Notes (5.x)</a></li>
<li><a href="https://docs.microsoft.com/en-gb/visualstudio/windows/?view=vs-2019" target="_blank" rel="noopener">Microsoft Visual Studio Release Notes</a></li>
<li><a href="https://www.tesla.com/support/software-updates" target="_blank" rel="noopener">Tesla Software Update Release Notes</a></li>
<li><a href="https://docs.microsoft.com/en-us/windows/release-health/release-information" target="_blank" rel="noopener">Windows 10 Release Notes</a></li>
</ul>
<h2 id="四、README"><a href="#四、README" class="headerlink" title="四、README"></a>四、README</h2><p>始终遵循 <a href="https://github.com/RichardLitt/standard-readme/blob/master/spec.zh-CN.md" target="_blank" rel="noopener">规范</a> 书写 <code>README.md</code> <strong>将利于项目维护以及交接流转。</strong></p>
<h2 id="五、分支管理"><a href="#五、分支管理" class="headerlink" title="五、分支管理"></a>五、分支管理</h2><h3 id="Renaming-default-branch-‘master’-to-‘main’"><a href="#Renaming-default-branch-‘master’-to-‘main’" class="headerlink" title="Renaming default branch, ‘master’ to ‘main’"></a>Renaming default branch, ‘master’ to ‘main’</h3><p>由于 <code>cultural sensitivity</code> ，2020年, 计算机行业对 <a href="https://www.theserverside.com/opinion/Master-slave-terminology-alternatives-you-can-use-right-now" target="_blank" rel="noopener">master，slave</a> 这两个词的使用引起了关注，这两个词被认为 harmful and antiquated ，不适合作为行业术语，同时也引发了众多抗议。<br><code>GitHub</code> 根据 <a href="https://sfconservancy.org/news/2020/jun/23/gitbranchname/" target="_blank" rel="noopener">Conservancy 的建议</a> 采取了行动，并在 <code>Git</code> 存储库初始化时<strong>不再使用术语 master</strong>， 因此，GitHub 将默认分支从 <strong>master</strong> 重命名为了 <strong>main</strong>。</p>
<p>相关资料：</p>
<ul>
<li><em><a href="https://www.theserverside.com/feature/Why-GitHub-renamed-its-master-branch-to-main" target="_blank" rel="noopener">https://www.theserverside.com/feature/Why-GitHub-renamed-its-master-branch-to-main</a></em></li>
<li><em><a href="https://github.com/github/renaming" target="_blank" rel="noopener">https://github.com/github/renaming</a></em></li>
</ul>
<h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><ul>
<li>生产/开发模型  <code>main/dev</code></li>
<li>特性/发布模型 <code>main/dev/feat</code></li>
<li>开发/发布分离模型  <code>main/dev/feat/release</code></li>
<li>开发/发布/缺陷分离模型 <code>main/dev/feat/release/hotfix</code></li>
</ul>
<h4 id="常驻分支"><a href="#常驻分支" class="headerlink" title="常驻分支"></a>常驻分支</h4><p><strong>main</strong> 主干分支（锁定，被保护），仅用于发布新版本，必须限制任何角色包括管理员自己在此分支上的任何提交操作，只允许管理员在此分支上进行 <code>merge request</code> or <code>pull request</code> 请求，以及进行打版本标签的操作，同时搭建好 <code>CI/CD</code> 流程，理论上每当对 <code>main</code> 分支有一个合并操作，就可以自动触发 <code>Git</code> 钩子脚本来构建并且发布软件到生产服务器。<br>​<br><strong>dev</strong>开发分支（非锁定），平时干活的地方。每当发版时，需要被合并到 <code>main</code>。对于简单的项目而言，这样的分支模型已经够用了。</p>
<h4 id="辅助分支-临时分支"><a href="#辅助分支-临时分支" class="headerlink" title="辅助分支 (临时分支)"></a>辅助分支 (临时分支)</h4><p>除了常驻分支，通常大的<strong>特性开发</strong>或<strong>生产缺陷修复</strong>还建议创建相应的<strong>临时分支</strong>。<br>因为：</p>
<ol>
<li>在分支上开发可以让你随意尝试，进退自如，比如碰上无法正常工作的特性或补丁，可以先搁置，直到有时间仔细核查修复为止。</li>
<li>团队中如果有代码审查流程，独立的分支还可以留给审查者抽空审查的时间和改进代码的余地，并将是否合并、是否发布的权利留给审查者，为代码质量设一道门槛。</li>
</ol>
<p>每一类分支都有一个特定目的，如何命名每一类分支？建议用相关的主题关键字进行命名，并且建议将分支名称分置于不同<strong>命名空间（前缀）</strong>下，例如：</p>
<table>
<thead>
<tr>
<th><strong>分支</strong></th>
<th><strong>来源分支</strong></th>
<th><strong>合并分支</strong></th>
<th><strong>锁定</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>feat-*</code></td>
<td><code>dev</code></td>
<td><code>dev</code></td>
<td><strong>NO</strong></td>
<td>特性分支，为了开发新增特定功能而建</td>
</tr>
<tr>
<td><code>release-*</code></td>
<td><code>dev</code></td>
<td><code>dev</code>,<code>main</code></td>
<td><strong>YES</strong></td>
<td>预发布分支，为了新版本的发布做准备，一般命名为<code>release-&lt;版本号&gt;</code></td>
</tr>
<tr>
<td><code>hotfix-*</code></td>
<td><code>main</code></td>
<td><code>dev</code>,<code>main</code></td>
<td><strong>NO</strong></td>
<td>补丁分支，为了修复生产缺陷而建，一般命名为 <code>hotfix-&lt;故障名或故障编号&gt;</code></td>
</tr>
</tbody>
</table>
<p>与常驻分支不同，这些辅助性分支总是有一个<strong>有限的生命期</strong>，<strong>等被合并到常驻分支之后，就应该会被移除掉。</strong><br>​</p>
<h2 id="六、扩展资料"><a href="#六、扩展资料" class="headerlink" title="六、扩展资料"></a>六、扩展资料</h2><ul>
<li>整合了「提交」和「发布」的方案：<a href="https://github.com/conventional-changelog/standard-version" target="_blank" rel="noopener">conventional-changelog/standard-version</a></li>
<li>…</li>
</ul>
]]></content>
      <categories>
        <category>Extract and Organize</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>SOP</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Hexo</title>
    <url>/2017/02/27/Hello-Hexo/</url>
    <content><![CDATA[<h1 id="Create-blog"><a href="#Create-blog" class="headerlink" title="Create blog"></a>Create blog</h1><h2 id="Pre-requirements"><a href="#Pre-requirements" class="headerlink" title="Pre-requirements"></a>Pre-requirements</h2><ul>
<li><a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> Recommend v12.4.0 and install via <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">nvm</a></li>
<li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li>
</ul>
<h2 id="The-blog-framework-used-is-Hexo"><a href="#The-blog-framework-used-is-Hexo" class="headerlink" title="The blog framework used is Hexo"></a>The blog framework used is <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a></h2><ul>
<li>A fast, simple &amp; powerful blog framework!</li>
<li>Powered by Node.js</li>
</ul>
<h2 id="The-remote-site-used-is-Github-Pages"><a href="#The-remote-site-used-is-Github-Pages" class="headerlink" title="The remote site used is Github Pages"></a>The remote site used is <a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a></h2><a id="more"></a>
<h2 id="Install-the-CLI-command-line-interface-of-Hexo-via-npm"><a href="#Install-the-CLI-command-line-interface-of-Hexo-via-npm" class="headerlink" title="Install the CLI(command-line interface) of Hexo via npm"></a>Install the CLI(command-line interface) of <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> via <a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h2 id="Initialise-Hexo"><a href="#Initialise-Hexo" class="headerlink" title="Initialise Hexo"></a>Initialise Hexo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<p>More info: about <a href="https://docs.npmjs.com/cli/install" target="_blank" rel="noopener">npm install(with no args, in package dir)</a></p>
<h1 id="Deploy-to-the-remote-server"><a href="#Deploy-to-the-remote-server" class="headerlink" title="Deploy to the remote server"></a>Deploy to the remote server</h1><h2 id="Install-hexo-deployer-git"><a href="#Install-hexo-deployer-git" class="headerlink" title="Install hexo-deployer-git"></a>Install <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>And then open the <code>_config.yml</code> in the root directory<br>edit settings :</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">[branch]</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">[message]</span></span><br></pre></td></tr></table></figure>
<h2 id="Deploy-to-remote-sites-after-generate-static-files"><a href="#Deploy-to-remote-sites-after-generate-static-files" class="headerlink" title="Deploy to remote sites after generate static files"></a>Deploy to remote sites after generate static files</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>
<p>More info: about <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a> and <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<h2 id="At-last"><a href="#At-last" class="headerlink" title="At last"></a>At last</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install sleepms, concurrently, open-cli first</span></span><br><span class="line">$ npm i -D sleepms concurrently open-cli@6.0.0</span><br></pre></td></tr></table></figure>
<p>open the <code>package.json</code> in the root directory,<br>and then add scripts to run <code>hexo-cli</code> command line combination via npm,</p>
<p>Then just like:<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "deploy": "hexo clean &amp;&amp; hexo g -d &amp;&amp; open-cli https://yourname.github.io",</span><br><span class="line">  "serve": "hexo clean &amp;&amp; concurrently \"hexo server -p 1314\" \"hexo g -w\" \"sleepms 5000 &amp;&amp; open-cli http://localhost:1314/\""</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">"devDependencies": &#123;</span><br><span class="line">  "concurrently": "^3.6.1",</span><br><span class="line">  "open-cli": "^6.0.0",</span><br><span class="line">  "sleep-ms": "^2.0.1"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>More info :</p>
<ul>
<li>about <a href="https://hexo.io/docs/commands.html#clean" target="_blank" rel="noopener">hexo clean</a> and <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">hexo server</a></li>
<li>about <a href="https://www.npmjs.com/package/concurrently" target="_blank" rel="noopener">concurrently</a></li>
</ul>
<p><strong><em>generate files, deploy and browse site online</em></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run deloy</span><br></pre></td></tr></table></figure>
<p><strong><em>generate files, watching changes and use local server to browse page</em></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run serve</span><br></pre></td></tr></table></figure>
<p>More info :</p>
<ul>
<li>if when you run hexo server and the port is occupied, you can try to stop the occupied port manually, (<a href="/2017/02/28/Stop-the-occupied-port-by-cmd-on-windows-OS/">Windows OS can do so</a>)</li>
<li>Using git deployer, so the deployment should be through <strong>Git Bash</strong>, and if execute <code>npm run dist</code> error that <code>fatal: Unable to create &#39;path/.git/index.lock&#39;: File exists.</code>, check to see if <code>.deploy_git</code> already exists, delete it and execute <code>npm run dist</code> again.</li>
</ul>
<h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><h4 id="If-you-encounter-the-following-problems"><a href="#If-you-encounter-the-following-problems" class="headerlink" title="If you encounter the following problems"></a>If you encounter the following problems</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TypeError [ERR_INVALID_ARG_TYPE]: The <span class="string">"mode"</span> argument must be <span class="built_in">integer</span>. Received an instance of Object</span><br><span class="line">    at copyFile (node:fs:2766:10)</span><br><span class="line">    at copyFile (&#123;&#123;path xxx&#125;&#125;/yourname.github.io/node_modules/graceful-fs/graceful-fs.js:181:12)</span><br><span class="line">    at tryCatcher (&#123;&#123;path xxx&#125;&#125;/yourname.github.io/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class="line">    at ret (<span class="built_in">eval</span> at makeNodePromisifiedEval (&#123;&#123;path xxx&#125;&#125;/yourname.github.io/node_modules/bluebird/js/release/promisify.js:184:12), &lt;anonymous&gt;:13:39)</span><br><span class="line">    at &#123;&#123;path xxx&#125;&#125;/yourname.github.io/node_modules/hexo-deployer-git/node_modules/hexo-fs/lib/fs.js:181:12</span><br><span class="line">    at tryCatcher (&#123;&#123;path xxx&#125;&#125;/yourname.github.io/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (&#123;&#123;path xxx&#125;&#125;/yourname.github.io/node_modules/bluebird/js/release/promise.js:547:31)</span><br><span class="line">    at Promise._settlePromise (&#123;&#123;path xxx&#125;&#125;/yourname.github.io/node_modules/bluebird/js/release/promise.js:604:18)</span><br><span class="line">    at Promise._settlePromise0 (&#123;&#123;path xxx&#125;&#125;/yourname.github.io/node_modules/bluebird/js/release/promise.js:649:10)</span><br><span class="line">    at Promise._settlePromises (&#123;&#123;path xxx&#125;&#125;/yourname.github.io/node_modules/bluebird/js/release/promise.js:729:18)</span><br><span class="line">    at Promise._fulfill (&#123;&#123;path xxx&#125;&#125;/yourname.github.io/node_modules/bluebird/js/release/promise.js:673:18)</span><br><span class="line">    at Promise._resolveCallback (&#123;&#123;path xxx&#125;&#125;/yourname.github.io/node_modules/bluebird/js/release/promise.js:466:57)</span><br><span class="line">    at Promise._settlePromiseFromHandler (&#123;&#123;path xxx&#125;&#125;/yourname.github.io/node_modules/bluebird/js/release/promise.js:559:17)</span><br><span class="line">    at Promise._settlePromise (&#123;&#123;path xxx&#125;&#125;/yourname.github.io/node_modules/bluebird/js/release/promise.js:604:18)</span><br><span class="line">    at Promise._settlePromise0 (&#123;&#123;path xxx&#125;&#125;/yourname.github.io/node_modules/bluebird/js/release/promise.js:649:10)</span><br><span class="line">    at Promise._settlePromises (&#123;&#123;path xxx&#125;&#125;/yourname.github.io/node_modules/bluebird/js/release/promise.js:729:18)</span><br></pre></td></tr></table></figure>
<p>Please switch to the old version of <code>node</code>, such as <code>12.4.0</code></p>
<h1 id="Postscript"><a href="#Postscript" class="headerlink" title="Postscript:"></a>Postscript:</h1><p>Customize the pretty style, configure the local search, add comment and so on by the powerful and interesting third party theme <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT</a>,<br>Through a variety of technical to add a variety of plugins…<br>The blog was born O(∩ _ ∩)O~</p>
]]></content>
      <categories>
        <category>Extract and Organize</category>
      </categories>
      <tags>
        <tag>get started</tag>
        <tag>node</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello uni-app</title>
    <url>/2020/02/19/Hello-Uni-App/</url>
    <content><![CDATA[<blockquote>
<p>最后更新于 <code>2020-2-20</code>, 信息出入请以 <a href="https://uniapp.dcloud.io/" target="_blank" rel="noopener">uni-app official document</a> 为准<br>为了保证信息有效性, 大量使用了文字链接关联官方文档的相关内容</p>
</blockquote>
<img src="/2020/02/19/Hello-Uni-App/front-cover.png" title="This is front-cover an image">
<p>(<strong><em> 图片源 <a href="https://uniapp.dcloud.io/" target="_blank" rel="noopener">uni-app official document</a> </em></strong>)</p>
<p>开局一张图，内容开始编。</p>
<p>近期接手维护一个基于 <a href="https://uniapp.dcloud.io/" target="_blank" rel="noopener">uni-app</a> 框架开发的项目，故笔墨伺候，简单做下功课。</p>
<p>以下内容对于未听说过或者未使用过 <code>uni-app</code>的前端“熟练工”相对比较友好些，内容有误，敬请指正。</p>
<p><code>uni-app</code> 是一个使用 <code>Vue.js</code> 开发全平台(<code>App</code>,<code>小程序</code>,<code>Web/H5</code>)前端应用的框架, 由”为开发者而生的” <a href="https://www.w3.org/" target="_blank" rel="noopener">W3C</a> 成员及 <a href="https://www.html5plus.org/" target="_blank" rel="noopener">HTML5 中国产业联盟</a>的发起单位，数字天堂(北京)网络技术有限公司(<a href="https://www.dcloud.io/" target="_blank" rel="noopener">DCloud</a>)出品。</p>
<blockquote>
<p><code>uni</code>，<a href="https://uniapp.dcloud.io/history" target="_blank" rel="noopener">读</a> <code>you ni</code>，是统一的意思.<br><code>app</code> 当指“应用（软件）”时，按 <code>Google</code> 翻译以及 <code>Apple</code> 官方读音, 读<code>/æp/</code>，而非 <code>/eɪ̯.pʰiː.pʰiː/</code></p>
</blockquote>
<p>已知全貌，准予置评。 🙈🙈🙈</p>
<p>开始吧…</p>
<a id="more"></a>
<h1 id="已有技术储备"><a href="#已有技术储备" class="headerlink" title="已有技术储备"></a>已有技术储备</h1><ul>
<li><p><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">Vue</a>, <a href="https://cli.vuejs.org/" target="_blank" rel="noopener">Vue CLI</a></p>
</li>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/" target="_blank" rel="noopener">微信小程序原生开发</a></p>
</li>
</ul>
<h1 id="摘几点规范"><a href="#摘几点规范" class="headerlink" title="摘几点规范"></a>摘几点规范</h1><ol>
<li><p>页面文件遵循<a href="https://vue-loader.vuejs.org/zh/spec.html" target="_blank" rel="noopener">Vue 单文件组件 (SFC) 规范</a>, 见 Vue 官方文档关于<a href="https://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="noopener">单文件组件</a>介绍</p>
</li>
<li><p>组件的标签靠近了微信小程序的规范,不推荐使用 HTML 标签,但如果开发者使用了 <code>div</code> 等 <code>HTML</code> 标签，在编译到非 H5 平台时也会被编译器转换为 <code>view</code> 等 <code>uni-app</code> 组件标签，同时包括 <code>css</code> 里的元素选择器也会同时转译。但为了管理方便、策略统一，<strong>建议使用 <a href="https://uniapp.dcloud.io/component/README" target="_blank" rel="noopener">uni-app 组件标签</a></strong></p>
</li>
<li><p>为了兼容多端,建议使用 <strong><code>flex</code> 布局</strong> , 样式单位使用 <strong><a href="https://uniapp.dcloud.io/frame?id=%E5%B0%BA%E5%AF%B8%E5%8D%95%E4%BD%8D" target="_blank" rel="noopener">rpx</a> 自适应单位</strong></p>
</li>
<li><p>选择 <code>uni-app</code> 框架的目的自然是为了满足跨端需求,抑或是为了项目将来可能出现的跨端需求时尽可能降低开发成本, 因此，应该尽可能避免使用各平台的原生 <code>api</code>, 比如不要使用 <code>H5</code> 平台浏览器自带的对象，比如 <code>document</code>、 <code>window</code>、<code>localstorage</code>、<code>cookie</code>等，更不要使用像 <code>jQuery</code> 等依赖这些浏览器对象的实现的框架, 不管是 <code>App</code> 还是各家 <code>小程序</code>, <code>快应用</code>均不支持.<br>因此, 建议拥抱使用 <a href="https://uniapp.dcloud.io/api/README" target="_blank" rel="noopener">uni-app 提供的 api</a>, <code>uni</code> 的 <code>api</code>是足够完成业务的，将各平台的 <code>api</code> 交由 <code>uni-app</code> 框架内部统一去适配处理. 事实上, <code>uni</code> 的 <code>api</code> 在编译到各个平台运行时就是会转为个平台对应的原始<code>api</code> 的.</p>
</li>
</ol>
<h1 id="记几点知晓"><a href="#记几点知晓" class="headerlink" title="记几点知晓"></a>记几点知晓</h1><ol>
<li><p>目测 <code>uni-app</code> 并没有同步更新 <code>CLI</code> 和 <a href="https://www.dcloud.io/hbuilderx.html" target="_blank" rel="noopener">官方 IDE HbuilderX</a> 中使用的 <code>uni-app</code> 版本, 如需享有 <code>uni-app</code> 各种新版本升级带来的全方位提升以及 <code>uni-app</code> 项目友好的开发体验, 还是须拥抱 <code>HbuilderX IDE</code>. (<strong><em>说到此, 笔者着实受限于目前 <code>HbuilderX</code> 无 <code>Linux</code> 版本, 只得默默使用 <code>CLI</code> 开发</em></strong>)</p>
</li>
<li><p><code>uni-app</code> 除了支持 ECMAScript 的 JS API 外, 支持了靠近<a href="https://developers.weixin.qq.com/miniprogram/dev/api/" target="_blank" rel="noopener">微信小程序 API</a>的<a href="https://uniapp.dcloud.io/api/README" target="_blank" rel="noopener">扩展 API</a>,将前缀 <code>wx</code> 替换为 <code>uni</code></p>
</li>
<li><p><code>uni-app</code> 在支持 <code>Vue</code> 的基础上( 目前并未 <code>100%</code> 全面支持,详请可下文<a href="./#Vue-js">注意事项中关于Vue的说明</a> ), 靠近了小程序,补充了 <a href="https://uniapp.dcloud.io/frame?id=%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F" target="_blank" rel="noopener">应用的生命周期和页面的生命周期</a></p>
</li>
<li><p><code>uni-app</code> 路由方式同样靠近了微信小程序,在 <code>pages.json</code> 中配置路由页面, 在页面生命周期中的 <code>onLoad</code> 函数中获取路由携带的参数, 详见 <code>uni-app</code> 的<a href="https://uniapp.dcloud.io/frame?id=%E8%B7%AF%E7%94%B1" target="_blank" rel="noopener">路由</a>, 当然开发者如需保持与 <code>vue-router</code> 一致的开发体验,可以尝试在 <a href="https://ext.dcloud.net.cn/search?q=vue-router" target="_blank" rel="noopener">uni-app 插件市场</a> 甄别合适插件择优慎用.</p>
</li>
<li><p><code>uni-app</code> 中的数据绑定, 则遵循了 <code>Vue 2.0</code> 的写法实现, 不支持微信小程序的数据绑定写法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ❌ 微信小程序的数据绑定方式是无效的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"item-&#123;&#123;id&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ⭕ 请使用 Vue 的数据绑定方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">v-bind:id</span>=<span class="string">"'item-' + id "</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">:id</span>=<span class="string">"'item-' + id "</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="跨端开发"><a href="#跨端开发" class="headerlink" title="跨端开发"></a>跨端开发</h1><h2 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h2><h3 id="“编译时”-条件编译"><a href="#“编译时”-条件编译" class="headerlink" title="“编译时” 条件编译"></a>“编译时” <a href="https://uniapp.dcloud.io/platform" target="_blank" rel="noopener">条件编译</a></h3><ol>
<li><p>代码的条件编译</p>
<p>在 <code>C 语言</code>中，通过 <code>#ifdef</code>、<code>#ifndef</code> 的方式，为 <code>windows</code>、<code>mac</code> 等不同 <code>os</code> 编译不同的代码。<br><code>uni-app</code> 参考这个思路，同样提供了<strong>条件编译</strong>的方式</p>
<p><strong>写法：</strong></p>
<p>以 <code>#ifdef</code> 或 <code>#ifndef</code> 加 <code>%PLATFORM%</code> 开头，以 <code>#endif</code> 结尾。</p>
<ul>
<li><code>#ifdef</code>：if defined 仅在某平台存在</li>
<li><code>#ifndef</code>：if not defined 除了某平台均存在</li>
<li><code>%PLATFORM%</code>：平台名称</li>
</ul>
<p><strong>支持的文件:</strong></p>
<ul>
<li><code>*.vue</code></li>
<li><code>*.js</code></li>
<li><code>*.css</code></li>
<li><code>pages.json</code></li>
<li>各预编译语言文件，如：<code>*.scss</code>、<code>*.less</code>、<code>*.stylus</code>、<code>*.ts</code>、<code>*.pug</code></li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li><p>条件编译是利用注释实现的，在不同语法里注释写法不一样，如: <code>js</code> 使用 <code>// 注释</code>、<code>css</code> 使用 <code>/* 注释 */</code>、<code>vue/nvue</code> 模板里使用 <code>&lt;!-- 注释 --&gt;</code>；</p>
</li>
<li><p><code>pages.json</code> 的条件编译，如不同平台的 <code>key</code> 名称相同，<code>cli</code> 项目下开发者自己安装的校验器会报错，需自行关闭这些校验器对 <code>json</code> 相同 <code>key</code> 的校验规则。</p>
</li>
</ul>
<p><strong><code>%PLATFORM%</code>值:</strong></p>
<table class="table">
<thead>
<tr>
<th>值</th>
<th>平台</th>
</tr>
</thead>
<tbody>
<tr>
<td>APP-PLUS</td>
<td>App</td>
</tr>
<tr>
<td>APP-PLUS-NVUE</td>
<td>App nvue</td>
</tr>
<tr>
<td>H5</td>
<td>H5</td>
</tr>
<tr>
<td>MP-WEIXIN</td>
<td>微信小程序</td>
</tr>
<tr>
<td>MP-ALIPAY</td>
<td>支付宝小程序</td>
</tr>
<tr>
<td>MP-BAIDU</td>
<td>百度小程序</td>
</tr>
<tr>
<td>MP-TOUTIAO</td>
<td>头条小程序</td>
</tr>
<tr>
<td>MP-QQ</td>
<td>QQ 小程序（目前仅 cli 版支持）</td>
</tr>
<tr>
<td>MP</td>
<td>微信小程序/支付宝小程序/百度小程序/头条小程序/QQ 小程序</td>
</tr>
</tbody>
</table>

<p><strong>示例:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  #ifdef  %PLATFORM% --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  #endif --&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// #ifdef  %PLATFORM%</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello uni app"</span>);</span><br><span class="line"><span class="comment">// #endif</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// #ifdef  %PLATFORM%</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="string">"path"</span>:<span class="string">"pages/home/home"</span>,</span><br><span class="line">     <span class="string">"style"</span>:&#123;</span><br><span class="line">         <span class="string">"navigationBarTitleText"</span>:<span class="string">"Hell uni-app"</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// #endif</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  #ifdef  %PLATFORM%  */</span></span><br><span class="line"><span class="selector-tag">view</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*  #endif  */</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>static</code> 资源文件的条件编译</p>
<p><code>static</code> 目录下创建不同名称的专有目录（目录名称同 <code>%PLATFORM%</code> 值,但字母须均为<strong>小写</strong>）,<br>专有目录下的静态资源只有在特定平台才会编译进去。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">┌─static</span><br><span class="line">│  ├─mp-weixin</span><br><span class="line">│  │  └─a.png</span><br><span class="line">│  └─b.png</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
<li><p>页面文件的条件编译</p>
<p>可以在项目根目录创建 <code>platforms</code> 目录，然后创建对应不同平台的<code>APP-PLUS</code>、<code>MP-WEIXIN</code>、…等子目录，存放对应不同平台的页面文件</p>
</li>
</ol>
<h3 id="“运行时”-判断"><a href="#“运行时”-判断" class="headerlink" title="“运行时” 判断:"></a>“运行时” 判断:</h3><ol>
<li><p><a href="https://uniapp.dcloud.io/platform" target="_blank" rel="noopener">api 获取平台信息</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">uni.getSystemInfoSync().platform; <span class="comment">// 输出 android | ios | devtools</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在“编译时”的<a href="./#条件编译">条件编译</a>中自行定义一个变量，赋不同值，来供后续在”运行时“代码中，获取所需具体的环境信息。</p>
</li>
</ol>
<h2 id="异常可能性排查指南"><a href="#异常可能性排查指南" class="headerlink" title="异常可能性排查指南"></a>异常可能性排查指南</h2><blockquote>
<p>传送门系列, 实战爬坑必备</p>
</blockquote>
<ul>
<li><a href="https://uniapp.dcloud.io/matter?id=h5%E6%AD%A3%E5%B8%B8%E4%BD%86app%E5%BC%82%E5%B8%B8%E7%9A%84%E5%8F%AF%E8%83%BD%E6%80%A7" target="_blank" rel="noopener">H5 正常但 App 异常的可能性</a></li>
<li><a href="https://uniapp.dcloud.io/matter?id=h5%E6%AD%A3%E5%B8%B8%E4%BD%86%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%82%E5%B8%B8%E7%9A%84%E5%8F%AF%E8%83%BD%E6%80%A7" target="_blank" rel="noopener">H5 正常但小程序异常的可能性</a></li>
<li><a href="https://uniapp.dcloud.io/matter?id=%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%AD%A3%E5%B8%B8%E4%BD%86app%E5%BC%82%E5%B8%B8%E7%9A%84%E5%8F%AF%E8%83%BD%E6%80%A7" target="_blank" rel="noopener">小程序正常但 App 异常的可能性</a></li>
<li><a href="https://uniapp.dcloud.io/matter?id=%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%88%96app%E6%AD%A3%E5%B8%B8%EF%BC%8C%E4%BD%86h5%E5%BC%82%E5%B8%B8%E7%9A%84%E5%8F%AF%E8%83%BD%E6%80%A7" target="_blank" rel="noopener">小程序或 App 正常，但 H5 异常的可能性</a></li>
<li><a href="https://uniapp.dcloud.io/matter?id=app%E6%AD%A3%E5%B8%B8%EF%BC%8C%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%81h5%E5%BC%82%E5%B8%B8%E7%9A%84%E5%8F%AF%E8%83%BD%E6%80%A7" target="_blank" rel="noopener">App 正常，小程序、H5 异常的可能性</a></li>
</ul>
<h2 id="各端兼容适配指北"><a href="#各端兼容适配指北" class="headerlink" title="各端兼容适配指北"></a>各端兼容适配指北</h2><blockquote>
<p>传送门系列, 实战爬坑必备</p>
</blockquote>
<ul>
<li><a href="https://uniapp.dcloud.io/matter?id=h5-%E5%BC%80%E5%8F%91%E6%B3%A8%E6%84%8F" target="_blank" rel="noopener">H5 开发注意</a></li>
<li><a href="https://uniapp.dcloud.io/matter?id=%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%B3%A8%E6%84%8F" target="_blank" rel="noopener">微信小程序开发注意</a></li>
<li><a href="https://uniapp.dcloud.io/matter?id=%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%B3%A8%E6%84%8F" target="_blank" rel="noopener">支付宝小程序开发注意</a></li>
<li><a href="https://uniapp.dcloud.io/matter?id=%E7%99%BE%E5%BA%A6%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%B3%A8%E6%84%8F" target="_blank" rel="noopener">百度小程序开发注意</a></li>
<li><a href="https://uniapp.dcloud.io/matter?id=%E5%90%84%E5%AE%B6%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8%E4%B8%8D%E5%90%8C%EF%BC%8C%E4%BC%9A%E9%80%A0%E6%88%90css%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">各家小程序的浏览器内核不同可能引起的 css 兼容性问题</a></li>
</ul>
<h2 id="各端规范"><a href="#各端规范" class="headerlink" title="各端规范"></a>各端规范</h2><blockquote>
<p>传送门系列, 各平台官方</p>
</blockquote>
<ul>
<li><a href="http://www.html5plus.org/doc/h5p.html" target="_blank" rel="noopener">App 扩展 HTML5+</a></li>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/" target="_blank" rel="noopener">微信小程序</a></li>
<li><a href="https://opendocs.alipay.com/mini/developer/getting-started" target="_blank" rel="noopener">支付宝小程序</a></li>
<li><a href="https://developer.toutiao.com/dev/cn/mini-app/introduction/about-mini-app/general-introduction" target="_blank" rel="noopener">字节跳动小程序</a></li>
<li><a href="https://smartprogram.baidu.com/docs/develop/fuctionlist/list/" target="_blank" rel="noopener">百度小程序</a></li>
<li><a href="https://q.qq.com/wiki/develop/miniprogram/frame/" target="_blank" rel="noopener">QQ小程序</a></li>
<li><a href="https://weex.apache.org/zh/guide/introduction.html" target="_blank" rel="noopener">Weex</a></li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><blockquote>
<p>传送门系列, 实战爬坑必备</p>
</blockquote>
<ul>
<li><a href="https://uniapp.dcloud.io/matter?id=vendorjs%E8%BF%87%E5%A4%A7%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F" target="_blank" rel="noopener">vendor.js 文件过大的处理方式</a></li>
</ul>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h2><ol>
<li><p><code>uni-app</code> 在发布到 <code>H5</code> 时支持所有 <code>Vue</code> 的语法</p>
</li>
<li><p><code>uni-app</code> 发布到 <code>App</code> 和 <code>小程序</code> 时，无法实现全部 <code>Vue</code> 语法</p>
</li>
<li><p>此外, <code>uni-app</code> <strong>老版本</strong>(即 <code>manifest.json</code> 中 <code>&quot;usingComponents&quot;:false</code>),<strong>不</strong>支持 <code>Vue</code> 的<strong>部分</strong>模板语法</p>
<ol>
<li>不支持部分复杂的 <code>JavaScript</code> 渲染表达式</li>
<li>不支持过滤器</li>
</ol>
<blockquote>
<p>那么何为老版本,找了下社区文档,从一篇名为”uni-app 新老编译模式差异说明”的帖子中可以了解到 <code>1.8版本</code> 之前的为老版本,而从 <code>1.8版本</code> 起新增了编译模式: <code>自定义组件模式</code> ,原来的老版本的编译模式则命名为 <code>template模板模式</code> ,新版本向下兼容同时支持了两种编译模式.那么后续创建项目需要选择编译模式时, 当然优先选择对 <code>Vue</code> 支持度更高,性能更佳的新模式:<code>自定义组件模式</code>.</p>
<p>这篇帖子非常详细地介绍了<strong>如何切换编译模式</strong>, <strong>非自定义组件模式升级为自定义组件模式注意</strong>, <strong>不同编译模式支持的 Vue 语法差异</strong>, 详情可移步至<a href="https://ask.dcloud.net.cn/article/35843" target="_blank" rel="noopener">“uni-app 新老编译模式差异说明”</a></p>
</blockquote>
</li>
<li><p><code>uni-app</code> <a href="https://ask.dcloud.net.cn/article/35021" target="_blank" rel="noopener">全局变量的几种实现方式</a>: <code>公用模块</code>, <code>挂载Vue.prototype</code>, <code>globalData</code>, <code>Vuex</code> 各有千秋, 其中 <a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">Vuex</a> 的数据响应机制最适合处理变量.</p>
<p>但是需要注意的的是, 在 <code>uni-app</code> 中使用 <a href="https://uniapp.dcloud.io/use-weex?id=%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">Weex</a>, 也就是文件名为 <code>.nvue</code> 时, 不支持 <code>挂载Vue.prototype</code> 的方式, 而且 <code>nvue</code> ( native vue ) <a href="https://uniapp.dcloud.io/use-weex?id=vue-%E5%92%8C-nvue-%E5%85%B1%E4%BA%AB%E7%9A%84%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE" target="_blank" rel="noopener">是从 HBuilderX 2.2.5 起，也才支持 Vuex</a></p>
<p>如果希望 <code>.vue</code> 和 <code>.nvue</code> 复用一些方法的话，目前只能推荐采用公用模块的方案，分别在 <code>.vue</code> 和 <code>.nvue</code> 文件中引入。</p>
</li>
<li><p><strong>非</strong> <code>H5</code> 端不支持在<strong>自定义组件</strong>上使用 <code>Class</code> 与 <code>Style</code> 绑定, 也不支持 <a href="https://cn.vuejs.org/v2/guide/class-and-style.html" target="_blank" rel="noopener">Vue 的 Class 与 Style 绑定</a> 中的 <code>classObject</code> 和 <code>styleObject</code> 语法</p>
</li>
<li><p>在 <code>H5</code> 平台 使用 <code>v-for</code> 循环整数时和其他平台存在差异，如 <code>v-for=&quot;(item, index) in 10&quot;</code> 中，<code>H5</code> 平台 <code>item</code> 从 <code>1</code> 开始，其他平台 <code>item</code> 从 <code>0</code> 开始，可使用第二个参数 <code>index</code> 来保证一致。</p>
</li>
<li><p>在<strong>非</strong> <code>H5</code> 平台 循环对象时不支持第三个参数，如 <code>v-for=&quot;(value, name, index) in object&quot;</code> 中， <code>index</code> 参数是不支持的。</p>
</li>
<li><p><strong>完整</strong>支持 <code>Vue</code> 的 <a href="https://uniapp.dcloud.io/use?id=data-%E5%B1%9E%E6%80%A7" target="_blank" rel="noopener">data 属性</a>, 计算属性, 条件渲染, 列表渲染, 表单控件绑定</p>
</li>
<li><p><strong>几乎</strong><a href="https://uniapp.dcloud.io/use?id=%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%99%A8" target="_blank" rel="noopener">全支持 Vue 的事件处理器</a></p>
<ol>
<li>为兼容各端，事件需使用 <code>v-on</code> 或 <code>@</code> 的方式绑定，请勿使用小程序端的 <code>bind</code> 和 <code>catch</code> 进行事件绑定.</li>
<li>事件修饰符: <code>.prevent</code>, <code>.self</code>, <code>.once</code>, <code>.capture</code>, <code>.passive</code> 仅在 H5 平台支持, <code>.stop</code> 全平台均支持， 阻止事件冒泡，在<strong>非</strong> <code>H5</code> 端**使用时同时阻止事件的默认行为, <code>uni-app</code>专注移动端，未支持键盘事件，因此不支持按键修饰符。</li>
</ol>
</li>
<li><p><a href="https://uniapp.dcloud.io/use?id=v-html%E6%8C%87%E4%BB%A4" target="_blank" rel="noopener">v-html</a>: 目前只支持 <code>H5</code> 端和在 <a href="https://ask.dcloud.net.cn/article/36599" target="_blank" rel="noopener">uni-app V3 版本编译模式</a>下的 <code>App</code> 端, 社区有<a href="https://ask.dcloud.net.cn/article/35772" target="_blank" rel="noopener">跨端的富文本处理方案</a></p>
</li>
<li><p>除了支持 <code>Vue</code> “组件三步法”：<code>引入</code>, <code>注册</code>, <code>使用</code> 外, <code>uni-app 2.5.0+</code> 版本支持在 <code>page.json</code>中配置组件,配置完成后, 无需引入, 无需注册, 即可直接使用, 详见 <a href="https://uniapp.dcloud.io/collocation/pages?id=easycom" target="_blank" rel="noopener">easycom</a></p>
</li>
<li><p>非 <code>H5</code> 端不支持如下组件特性:</p>
<ul>
<li><code>Slots</code>（scoped 暂时还没做支持）</li>
<li>动态组件</li>
<li>异步组件</li>
<li><code>inline-template</code></li>
<li><code>X-Templates</code></li>
<li><code>keep-alive</code></li>
<li><code>transition</code> （可使用 <a href="https://uniapp.dcloud.io/api/ui/animation" target="_blank" rel="noopener">animation</a> 或 <code>CSS</code> 动画替代）</li>
<li><strong>老版本</strong>以及新版中<code>非自定义组件编译模式</code>不支持在组件上定义 <code>click</code> 等原生事件、不支持 <code>v-show</code>（可用 <code>v-if</code> 代替）, 也不支持以定义 <code>class</code> 的方式来实现 <code>style</code> 样式属性(例：<code>&lt;card class=&quot;class-name&quot;&gt; &lt;/card&gt;</code> 样式是不会生效的)</li>
<li><strong>老版本</strong>以及新版中<code>非自定义组件编译模式</code>在组件里使用 <code>slot</code> 嵌套的其他组件时不支持 <code>v-for</code></li>
</ul>
</li>
<li><p>在 <code>main.js</code> 入口文件中, <code>Vue.component</code>注册全局组件时第一个参数必须是静态的字符串, <code>.nvue</code> 页面暂<strong>不</strong>支持全局组件,另外,关于自定义组件的命名, 除了不能使用标准的 <code>HTML</code> 及 <code>SVG</code> 标签名外, 也不能使用 <code>uni-app</code> 中的 <code>保留关键字</code>,附上<a href="https://uniapp.dcloud.io/use?id=%E5%91%BD%E5%90%8D%E9%99%90%E5%88%B6" target="_blank" rel="noopener">列表</a>.</p>
</li>
</ol>
<h2 id="Weex-nvue"><a href="#Weex-nvue" class="headerlink" title="Weex(nvue)"></a>Weex(nvue)</h2><blockquote>
<p>传送门<br><a href="https://uniapp.dcloud.io/use-weex" target="_blank" rel="noopener">使用 Weex/nvue 注意事项</a></p>
</blockquote>
<h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5+"></a>HTML5+</h2><blockquote>
<p>传送门<br><a href="https://uniapp.dcloud.io/use-html5plus" target="_blank" rel="noopener">使用 HTML5+ 注意事项</a></p>
</blockquote>
<h1 id="开始实操项目-Enjoy！"><a href="#开始实操项目-Enjoy！" class="headerlink" title="开始实操项目, Enjoy！"></a>开始实操项目, Enjoy！</h1><blockquote>
<p>其他的内容例如 <code>uni-app</code> 框架的 <a href="https://uniapp.dcloud.io/collocation/pages" target="_blank" rel="noopener">配置，框架接口</a> 和 <a href="https://uniapp.dcloud.io/component/README" target="_blank" rel="noopener">组件</a> 以及 <a href="https://uniapp.dcloud.io/api/README" target="_blank" rel="noopener">API</a>, 其实与 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/" target="_blank" rel="noopener">微信小程序</a> 大同小异， 拥有了小程序原生开发技术， 直接在实践中按需查阅即可。</p>
</blockquote>
<h2 id="官方推荐"><a href="#官方推荐" class="headerlink" title="官方推荐"></a>官方推荐</h2><ul>
<li><a href="https://uniapp.dcloud.io/quickstart?id=_1-%E9%80%9A%E8%BF%87-hbuilderx-%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2" target="_blank" rel="noopener">HbuilderX 可视化界面</a></li>
<li><a href="https://uniapp.dcloud.io/quickstart?id=_2-%E9%80%9A%E8%BF%87vue-cli%E5%91%BD%E4%BB%A4%E8%A1%8C" target="_blank" rel="noopener">HbuilderX 和 Vue CLI</a></li>
</ul>
<h2 id="个人实践"><a href="#个人实践" class="headerlink" title="个人实践"></a>个人实践</h2><ul>
<li><a href="#">Visual Studio Code 和 Vue CLI <code>(敬请期待)</code></a></li>
</ul>
]]></content>
      <categories>
        <category>Extract and Organize</category>
      </categories>
      <tags>
        <tag>get started</tag>
        <tag>web</tag>
        <tag>uni app</tag>
      </tags>
  </entry>
  <entry>
    <title>Stop the occupied port by cmd on windows OS</title>
    <url>/2017/02/28/Stop-the-occupied-port-by-cmd-on-windows-OS/</url>
    <content><![CDATA[<h3 id="List-corresponding-ports-and-PIDs-of-all-the-network-connections"><a href="#List-corresponding-ports-and-PIDs-of-all-the-network-connections" class="headerlink" title="List corresponding ports and PIDs of all the network connections"></a>List corresponding ports and PIDs of all the network connections</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure>
<h3 id="Show-the-network-connections-on-the-occupied-port"><a href="#Show-the-network-connections-on-the-occupied-port" class="headerlink" title="Show the network connections on the occupied port"></a>Show the network connections on the occupied port</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">netstat -ano|<span class="built_in">find</span> "the occupied port number"</span><br></pre></td></tr></table></figure>
<h3 id="Stop-the-network-connections-by-corresponding-PID-number-of-the-occupied-port"><a href="#Stop-the-network-connections-by-corresponding-PID-number-of-the-occupied-port" class="headerlink" title="Stop the network connections by corresponding PID number of the occupied port"></a>Stop the network connections by corresponding PID number of the occupied port</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">taskkill</span> /F /PID [the corresponding PID number]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Learn A Bit</category>
      </categories>
      <tags>
        <tag>issue</tag>
        <tag>cmd</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Web UI Jottings</title>
    <url>/2024/10/14/Web-UI-Jottings/</url>
    <content><![CDATA[<h2 id="从原始-CSS-到-CSS-框架的演变"><a href="#从原始-CSS-到-CSS-框架的演变" class="headerlink" title="从原始 CSS 到 CSS 框架的演变"></a>从原始 CSS 到 CSS 框架的演变</h2><p>在 CSS 发展的初期，开发者主要使用以下几种方式来编写和应用样式：</p>
<ul>
<li><strong>内联样式</strong>：在 HTML 标签内直接使用 <code>style</code> 属性。这种方式简单直接，但难以维护和复用。</li>
<li><strong>内嵌样式</strong>：在 HTML 文档的 <code>&lt;head&gt;</code> 中使用 <code>&lt;style&gt;</code> 标签编写样式。虽然比内联样式稍好，但仍不够模块化。</li>
<li><strong>外部样式表</strong>：通过 <code>&lt;link&gt;</code> 标签将独立的 CSS 文件引入 HTML 文档。这种方式使得样式得以复用和集中管理，成为现代开发的主流方法。</li>
</ul>
<p>这些原始的 CSS 编写方式虽然有效，但当项目规模扩大时，其维护性和复用性逐渐成为挑战。历史的车轮滚滚向前，开发者需要从容应对项目复杂性不断提升的方案，CSS 预处理器如 <strong><a href="https://sass-lang.com/" target="_blank" rel="noopener">Sass</a></strong> 和 <strong><a href="http://lesscss.org/" target="_blank" rel="noopener">LESS</a></strong> 也应运而生。它们通过提供变量、嵌套规则、混合宏等功能，极大地提升了 CSS 的可维护性和扩展性，使得开发者可以更高效地管理复杂项目中的样式。</p>
<p>随后，<strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS3" target="_blank" rel="noopener">CSS3</a></strong> 的发布为 CSS 带来了许多新特性，包括动画、变换、媒体查询等，使得样式的编写更为灵活和丰富。CSS3 的这些扩展为开发者提供了更强大的工具来创建现代化的响应式页面，从而为 CSS 框架的进一步发展奠定了基础。</p>
<p>接下来，CSS 框架逐渐成为解决方案，以标准化和模块化的方式提升开发效率。</p>
<p>在 CSS 框架的进化过程中，尽管 <strong><a href="https://getbootstrap.com/" target="_blank" rel="noopener">Bootstrap</a></strong> 被广泛视为使前端开发者摆脱手写样式的首个大规模流行 CSS 框架，但它并非最早的尝试。在 Bootstrap 之前，已有若干框架为后续 CSS 发展奠定了基础，例如 <strong><a href="https://github.com/joshuaclayton/blueprint-css" target="_blank" rel="noopener">Blueprint CSS</a></strong> 和 <strong><a href="https://github.com/nathansmith/960-Grid-System" target="_blank" rel="noopener">960 Grid System</a></strong>。</p>
<ul>
<li><strong>Blueprint CSS</strong>（2007 年）：是早期极具影响力的 CSS 框架之一，它通过定义通用样式和布局规范来提高开发效率。Blueprint CSS 的出现意味着开发者可以依赖一套统一的标准，而不必重复发明轮子，从而提高了代码的可读性和维护性。</li>
<li><strong>960 Grid System</strong>（2008 年）：引入基于 960 像素宽度的网格布局系统，为开发者提供标准化的页面布局方法。这个系统在当时极大地简化了页面布局的工作，使得开发者可以快速创建一致性强的响应式页面。</li>
</ul>
<p>Bootstrap 于 <strong>2011 年</strong> 由 Twitter 的开发者 Mark Otto 和 Jacob Thornton 发布，其结合了现代化的响应式布局理念和组件化风格，迅速成为广泛应用的 CSS 框架。Bootstrap 的成功在于它将响应式网格布局、样式和组件整合到了一起，为开发者提供了一种“一站式”的前端开发解决方案。Bootstrap 引入了大量的预定义样式和 UI 组件，极大地降低了开发复杂性，尤其是在构建跨浏览器兼容的用户界面时，Bootstrap 的贡献功不可没。</p>
<p>Bootstrap 的出现标志着前端开发进入了一个新的时代，使得开发者能够高效地实现页面布局。然而，Bootstrap 的预定义样式也逐渐显现出其局限性——页面设计趋于一致，缺乏个性化表达。这种标准化设计虽然提升了效率，但也导致了许多网站的“千篇一律”现象，限制了创意的发挥。随着前端领域需求的多样化，开发者开始寻求更加灵活和高度可定制化的解决方案，一场新的变革正在酝酿之中。</p>
<h2 id="从-CSS-预处理器到-UI-组件库的兴起"><a href="#从-CSS-预处理器到-UI-组件库的兴起" class="headerlink" title="从 CSS 预处理器到 UI 组件库的兴起"></a>从 CSS 预处理器到 UI 组件库的兴起</h2><p>在 CSS 预处理器提升了样式管理的效率之后，<strong>UI 组件库</strong>随着在<a href="https://modern-web.dev/" target="_blank" rel="noopener">Modern Web</a>时代的全面到来应运而生。它们不仅提供了样式，还封装了交互逻辑与功能，使得前端开发更加模块化与高效。UI 组件库的出现将“预制组件”带入了前端开发的日常，为开发者提供了一整套标准化、可复用的组件，极大地减少了样式和功能的重复开发。以下几位重要的玩家在这一过程中发挥了关键作用：</p>
<ul>
<li><strong>2014 年：Material-UI</strong> 问世，作为第一个基于 Google Material Design 规范的 React 组件库，它为前端界带来了现代化的设计风格与极致的用户体验。Material-UI 的推出帮助开发者能够轻松实现视觉一致性和交互规范化，从而大幅提升了开发速度和用户体验, 自 2022 年以来的强劲增长尤为引人注目。其在 2021 年发布的 <strong>v5</strong> 版本中，引入了更加灵活的样式系统、更完善的 TypeScript 支持，以及与现代工具（如 Emotion）集成的改进，从而逐渐确立了其在前端开发领域的主导地位。</li>
<li><strong>2016 年：Ant Design</strong> 由阿里巴巴推出，主要面向企业级应用，其设计规范与丰富的组件使其迅速成为企业级后台的首选工具。Ant Design 不仅提供了完备的组件库，还带有系统化的设计语言，这对于构建大型企业应用至关重要。</li>
<li><strong>2016 年：Element</strong> 作为 Vue 生态中的重要组件库，致力于提供优雅、现代的界面设计，极大地简化了前端开发的复杂性。Element 通过其精致的组件体系和良好的文档支持，成为了 Vue 开发者的首选，使得开发效率得到了显著提升。</li>
<li><strong>2017 年：Vuetify</strong> 将 Material Design 引入 Vue 生态，帮助开发者轻松构建美观的用户界面。Vuetify 的出现使得 Vue 项目能够更好地实现符合 Material Design 标准的应用，进一步加强了开发者在 UI 设计上的便利性。</li>
</ul>
<p>还有 <strong><a href="https://github.com/chakra-ui/chakra-ui" target="_blank" rel="noopener">Chakra UI</a></strong> 、 <strong><a href="https://github.com/palantir/blueprint" target="_blank" rel="noopener">Blueprint UI</a></strong> 和 <strong><a href="https://github.com/buefy/buefy" target="_blank" rel="noopener">Buefy</a></strong> …… 等等,如雨后春笋般，这些组件库的出现为开发者带来”组装式”的开发体验，使得页面构建更加高效，减少了从零开始编写样式和交互逻辑的工作量，开发者可以更专注于业务逻辑的实现。同时，这些组件库通过统一的设计规范，显著提升了用户体验的一致性。此外，诸如 <strong>Ant Design Pro</strong> 和 <strong>Vue Element Admin</strong> 等开箱即用的组件库框架，通过提供预配置的模板、最佳实践以及现成的页面和组件以及脚手架，进一步帮助开发者快速搭建项目，简化初始配置和项目架构。这些框架不仅减少了重复性工作，还为开发者提供了完整的项目结构、权限管理、数据流和布局方案，从而显著提升了开发效率和项目的稳定性。</p>
<h2 id="Atomic-CSS-与-CSS-in-JS-的崛起：灵活性的新时代"><a href="#Atomic-CSS-与-CSS-in-JS-的崛起：灵活性的新时代" class="headerlink" title="Atomic CSS 与 CSS-in-JS 的崛起：灵活性的新时代"></a>Atomic CSS 与 CSS-in-JS 的崛起：灵活性的新时代</h2><p>当 UI 组件库成为前端开发主流的同时，一种新的设计理念正在悄然生长—<strong>Atomic CSS</strong> 横空出世，并迅速在前端社区掀起了一股变革浪潮，其典型代表便是 <strong><a href="https://tailwindcss.com/" target="_blank" rel="noopener">Tailwind CSS</a></strong>。</p>
<p><strong>Tailwind CSS</strong> 的核心理念是将样式拆解为最小的原子单位，通过工具类（utility classes）来构建页面。它的出现类似于提供了“新鲜食材”，而非预制成品，赋予开发者极大的自由去组合和构建独特的用户界面。Tailwind 的灵活性使其在大型和小型项目中均表现优异：在小型项目中，开发者可以直接使用工具类以快速实现布局和样式；而在大型项目中，Tailwind 提供的可扩展性和模块化方式，使得开发者能够高效地构建和维护复杂的 UI 系统。开发者不仅可以依赖其丰富的工具类来完成基本的布局和样式处理，还可以通过 Tailwind 的插件系统对其进行扩展，从而定制出符合项目需求的独特设计。</p>
<p>类似的按照 Atomic CSS 设计的库还有<a href="https://github.com/unocss/unocss" target="_blank" rel="noopener">UnoCSS</a>，通过按需生成样式和高度灵活的配置展示了其独特的优势，能够使样式文件的体积更小，页面加载更快，特别适用于需要快速响应和小打包体积的项目。然而，UnoCSS 的生态系统相对较小，社区资源和插件支持仍不如 Tailwind 丰富。</p>
<p>这种新设计，也引起了传统框架的注意，<strong>Bootstrap 5</strong> 也开始引入工具类<a href="https://getbootstrap.com/docs/5.0/utilities/api/" target="_blank" rel="noopener">Utilities API</a>的设计，而且保留了其原有的整体性和一致性，然而在细颗粒度和灵活性上相对于 Tailwind CSS 稍逊一筹。</p>
<p>与此同时，<strong>CSS-in-JS</strong> 也在前端开发中扮演着越来越重要的角色，其中最具代表性的便是 <strong><a href="https://github.com/styled-components/styled-components" target="_blank" rel="noopener">Styled Components</a></strong>。<strong>Styled Components</strong> 通过将 CSS 直接写入 JavaScript 文件中，实现了样式的组件化管理。这种方式特别适用于 React 生态，帮助开发者将样式与组件逻辑紧密结合，从而实现高度可维护和可复用的代码。</p>
<p>在 CSS-in-JS 的开发模式中，样式被视为 JavaScript 的一部分，使得动态样式和主题切换变得更为自然和便捷。Styled Components 使用 JavaScript 的模板字符串来编写样式，这种写法使得开发者可以利用 JavaScript 的所有特性（如变量、条件语句等）来增强样式的灵活性。例如，开发者可以轻松地基于组件的状态动态地更改样式，或者实现复杂的响应式设计，而无需额外的 CSS 文件或全局变量管理。这种保守性在一定程度上保证了向后兼容和易用性，但却在灵活度上与 Tailwind 相比略显不足。</p>
<p>工具类 CSS 框架以及 CSS-in-JS 的出现，让开发者能够根据不同的需求场景选择最合适的工具，从而进一步提高开发效率和代码的可维护性。无论是希望利用 <strong>Tailwind CSS</strong> 的工具类方式进行快速开发，还是通过 <strong>Styled Components</strong> 实现组件化和动态化样式管理，开发者都能找到符合项目需求的解决方案。</p>
<h2 id="回顾与前瞻"><a href="#回顾与前瞻" class="headerlink" title="回顾与前瞻"></a>回顾与前瞻</h2><p>回顾 CSS 框架和组件库的发展历程，我们看到它们在不断演变，以适应开发者和用户需求的变化。</p>
<ul>
<li><strong>手动编写 CSS 规则样式</strong></li>
<li><strong>Blueprint CSS 和 960 Grid System</strong> 的早期探索，为后续的 CSS 框架铺平了道路。它们提供了一种系统化的布局方式和开发标准，虽然在功能上较为基础，但其对前端开发思想的启发是不可磨灭的。</li>
<li><strong>Bootstrap</strong> 通过模块化与响应式布局开创了 CSS 框架的新纪元，极大地提升了前端开发的效率。Bootstrap 提供了大量现成的组件和样式，使得开发者可以迅速搭建出符合现代标准的页面，极大地简化了开发流程。</li>
<li><strong>UI 组件库</strong> 的崛起，如 <strong>Material-UI</strong>、<strong>Ant Design</strong> 等，为开发者提供了丰富的预制组件，使企业级应用的开发更加高效和一致化。它们的组件化思想使得开发者可以基于这些构建块快速实现业务需求，减少了从设计到实现的沟通成本。</li>
<li><strong>Tailwind CSS</strong> 和  <strong>UnoCSS</strong> 等所代表的 <strong>Atomic CSS</strong> 思想，使得开发者能够灵活地控制基础样式，通过工具类实现完全自定义的界面风格，从而进一步推动性能和灵活性上的提升。</li>
<li>CSS-in-JS 的出现，如 <strong>Styled Components</strong>，将 CSS 与 JavaScript 融合在一起，特别适用于 React 生态，通过将样式组件化，极大地提升了代码的可维护性和灵活性。</li>
</ul>
<p>从手写样式到样式框架雏形，再到样式预处理器，接着是各种UI组件库到现在的Atomic样式设计，这些工具给开发者提供了越来越多的选择，每一种选择都推动了前端技术的进步，也为开发者带来了更大的创作自由和表达空间。无论是希望通过现成组件快速上线项目，还是想要实现高度定制化的风格，这些工具都为开发者提供了广泛的支持。</p>
<img src="/2024/10/14/Web-UI-Jottings/npm-trends.jpg" title="This is an npm-trends image">
<blockquote>
<p>如图所示，NPM Trends 的下载安装量统计，2024 年这个时间点之后，Tailwind CSS 依旧一骑绝尘，持续上行，而 Bootstrap 和 Styled Components 则似乎出现了些许下行的趋势。</p>
</blockquote>
<h3 id="憧憬"><a href="#憧憬" class="headerlink" title="憧憬"></a>憧憬</h3><p>随着技术的不断演进，<strong>AI</strong> 和<strong>低代码（Low-Code）</strong> 的盛行，重新定义着前端开发的可能性从未变得如此巨大。特别是像 AI 驱动的生产工具正在不断涌现、百家争鸣，<strong>Cursor</strong>、<strong>Void</strong>、<strong>PearAI</strong> 等 AI 代码编辑器，<strong><a href="https://github.com/features/copilot" target="_blank" rel="noopener">GitHub Copilot</a></strong>、<strong><a href="https://www.codeium.com/" target="_blank" rel="noopener">Codeium</a></strong> 等 AI 助手，正如当年那个 UI 组件库百花齐放好时代，势必将推动开发走向更加自动化和智能化的方向，一定会萌发出更加先进的开发方案，让我们紧跟时代，拭目以待。</p>
]]></content>
      <tags>
        <tag>UI</tag>
        <tag>Web</tag>
        <tag>CSS</tag>
        <tag>CSS in JS</tag>
        <tag>Atomic CSS</tag>
        <tag>UI Components</tag>
      </tags>
  </entry>
  <entry>
    <title>setup HTTPS(SSL) on local development environment (Ubuntu)</title>
    <url>/2020/03/09/setup-HTTPS(SSL)-on-local-development-environment/</url>
    <content><![CDATA[<h1 id="Edit-hosts-file"><a href="#Edit-hosts-file" class="headerlink" title="Edit hosts file"></a>Edit <code>hosts</code> file</h1><p>location: <code>/etc/hosts</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># e.g:</span></span><br><span class="line"><span class="meta"># add a local domain</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> xllily.com</span><br></pre></td></tr></table></figure>
<h1 id="Install-nginx"><a href="#Install-nginx" class="headerlink" title="Install nginx"></a>Install nginx</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># create folder 'ssl' for subsequent use</span></span><br><span class="line"><span class="built_in">cd</span> /etc/nginx</span><br><span class="line">mkdir ssl</span><br></pre></td></tr></table></figure>
<p><strong>Control:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s [ stop | quit | reopen | reload ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"></span><br><span class="line">sudo systemctl [ stop | start | restart | reload | <span class="built_in">disable</span> ] nginx</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="Generate-self-signed-TLS-certificate-using-OpenSSL"><a href="#Generate-self-signed-TLS-certificate-using-OpenSSL" class="headerlink" title="Generate self-signed TLS certificate using OpenSSL"></a>Generate self-signed TLS certificate using OpenSSL</h1><p>A great guy wrote a bash script</p>
<p><a href="https://github.com/loganstellway/self-signed-ssl" target="_blank" rel="noopener">loganstellway/self-signed-ssl</a></p>
<p>Just execute the script and pass in the options</p>
<p><strong>Options:</strong></p>
<ul>
<li><p><code>-c</code> | <code>--country</code></p>
<p>Country Name (2 letter code)</p>
</li>
<li><p><code>-s</code> | <code>--state</code></p>
<p>State or Province Name (full name)</p>
</li>
<li><p><code>-l</code> | <code>--locality</code></p>
<p>Locality Name (eg, city)</p>
</li>
<li><p><code>-o</code> | <code>--organization</code></p>
<p>Organization Name (eg, company)</p>
</li>
<li><p><code>-u</code> | <code>--unit</code></p>
<p>Organizational Unit Name (eg, section)</p>
</li>
<li><p><code>-n</code> | <code>--common-name</code></p>
<p>Common Name (e.g. server FQDN or YOUR name)</p>
</li>
<li><p><code>-e</code> | <code>--email</code></p>
<p>Email Address</p>
</li>
<li><p><code>-p</code> | <code>--path</code></p>
<p>Path to output generated keys</p>
</li>
<li><p><code>-h</code> | <code>--help</code></p>
<p>Display help and exit</p>
</li>
<li><p><code>-v</code> | <code>--verbose</code><br>Verbose output</p>
</li>
</ul>
<p><strong>Usage:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Generate the certificate in the previously created directory 'ssl'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># e.g</span></span><br><span class="line">$ sudo ./self-signed-tls -c=CN -s=Shang-Hai -l=shanghai -o=xllily -u=dev -n=xllily.com -e=xllily@email.com -p=/etc/nginx/ssl/</span><br></pre></td></tr></table></figure>
<h1 id="Import-the-crt-to-the-browser-and-restart"><a href="#Import-the-crt-to-the-browser-and-restart" class="headerlink" title="Import the crt to the browser and restart"></a>Import the <code>crt</code> to the browser and restart</h1><p>Chrome:</p>
<p><code>Setting</code></p>
<p>-&gt; <code>(Advanced) Manage Certificates</code></p>
<p>-&gt; <code>toggle to the &#39;Authorities&#39;(Tab)</code><br><img src="/2020/03/09/setup-HTTPS(SSL)-on-local-development-environment/shot1.png" title="This is an image"></p>
<p>-&gt; <code>Import</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># eg: import the</span></span><br><span class="line">/etc/nginx/ssl/xllily.com_CA.pem</span><br></pre></td></tr></table></figure>
<p>-&gt; <code>Restart the browser</code></p>
<h1 id="Configure-nginx-and-reload"><a href="#Configure-nginx-and-reload" class="headerlink" title="Configure nginx and reload"></a>Configure nginx and reload</h1><p>Edit <code>/etc/nginx/nginx.conf</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"># ...</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"># ...</span><br><span class="line">	server &#123;</span><br><span class="line">		listen <span class="number">80</span>;</span><br><span class="line">		listen <span class="number">443</span> ssl http2;</span><br><span class="line">		server_name xllily.com;</span><br><span class="line">		ssl_certificate /etc/nginx/ssl/xllily.com.crt;</span><br><span class="line">		ssl_certificate_key /etc/nginx/ssl/xllily.com.key;</span><br><span class="line">		location / &#123;</span><br><span class="line">			root html;</span><br><span class="line">			index index.html index.htm;</span><br><span class="line">            <span class="meta"># you can open the proxy</span></span><br><span class="line">            # proxy_pass http:<span class="comment">//....;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"># ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># ...</span><br></pre></td></tr></table></figure>
<h1 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h1><img src="/2020/03/09/setup-HTTPS(SSL)-on-local-development-environment/shot2.png" title="This is an image">
]]></content>
      <categories>
        <category>Learn A Bit</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>nginx</tag>
        <tag>openssl</tag>
        <tag>https</tag>
        <tag>development env</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello State</title>
    <url>/2020/11/29/Hello-State/</url>
    <content><![CDATA[<p><strong><em>TL;DR</em></strong></p>
<p>主导着当今世界前端技术发展的两家公司依然是 Google, Facebook；<br>目前前端的”三大框架“：Google 「Angular」 ，Facebook 「React」，而「Vue」也不完全算是是“自立门户”，也是吸收并借鉴了前者的优秀思想并进一步融合。</p>
<p>而 “三大框架” ，哪怕自身只是一个 View Library, 无一列外也都离不开 MV<em> 的设计模式，在此设计模式下开发，就绕不开至关重要的的概念：<strong>状态管理</strong>，笔者也一如既往固执己见地认为，整个状态管理的过程其实就是贯彻 MV</em> 对 Model、View 、 Controller/View Model 三者分层管理具体实施的过程，从而尽可能地保证 View 层的单薄，保证 Controller 的逻辑“C位”， 保证 Model 的数据中心，自始至终将应用的可维护性控制在一个较好的水平。</p>
<p>今天借 「State Management」 题发挥，基于团队目前项目所采用的技术框架 Vue, 来聊一聊状态管理。</p>
<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>Vue 框架也是深受 <code>MVVM</code>（model, view, view-model) 优秀的编程模型规范的启发,</p>
<img src="/2020/11/29/Hello-State/mvvm.jpg" title="This is mvvm an image">
<p>同时结合了<strong>组件化</strong>的先进理念，自然而然地驱使开发者将整个WEB应用抽象分离到一个一个组件的颗粒度， 当一个应用不断被组件化抽象，小到一个按钮，大到一个页面，每个组件本身就是一个个独立的 <code>vm</code> 单元。</p>
<img src="/2020/11/29/Hello-State/components.png" title="This is components an image">
<p>在 <a href="https://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="noopener">SFC (single-file components)</a> 单文件组件的开发范式下，每个 <code>*.vue</code> 文件就是一个 <code>vm</code> ， <code>&lt;template&gt;...&lt;/template&gt;</code> 可以理解为 <code>vm</code> 中的 <code>v</code> ；而  <code>&lt;style&gt;&lt;style&gt;</code> 可以理解为 <code>vm</code> 中的 <code>m</code>的样式控制部分，<code>&lt;script&gt;&lt;/script&gt;</code> 可以理解为 <code>vm</code>中的 <code>m</code>的逻辑和数据部分, 另外框架底层实现了一个 <code>MVVM</code> 模型中的“绑定器” ，通过开发者对每个视图模型的声明式编程来驱动程序的视图更新。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// *.vue</span></span><br><span class="line">vm</span><br><span class="line">├── v <span class="comment">// view</span></span><br><span class="line">│   └── template</span><br><span class="line">└── m <span class="comment">// model</span></span><br><span class="line">    ├── style</span><br><span class="line">    └── script</span><br><span class="line">        ├── data</span><br><span class="line">        │   ├── data()&#123;&#125;</span><br><span class="line">        │   └── computed:&#123;&#125;</span><br><span class="line">        └── logic</span><br><span class="line">            ├── lifecycle-hooks <span class="comment">// created,...</span></span><br><span class="line">            ├── watch:&#123;&#125;</span><br><span class="line">            └── methods&#123;&#125;</span><br><span class="line"><span class="comment">// 这种“奇怪的结构“思维，源于笔者入门编程时，深受 `MVC`（model, view, controller）编程模型启蒙式的“洗脑”，应用程序分层的思维早已根深蒂固</span></span><br></pre></td></tr></table></figure></p>
<p>如此，开发者管理维护单个组件（<code>vm</code> 实例）本身，确实可以做到非常高效、清晰，<br>但是随着应用迭代，不知不觉，整个应用也变成了庞大的 “vm” 集合， 相隔层级较深的组件与组件之间可能形成了较长的通信路径。</p>
<p>而 <code>Vue</code> 本身内置的数据流管理方案有限， <code>props</code>(其实本质就像一个函数定义的参数), <code>event emit</code> 等其实在复杂场景发挥有限，不适合长路径的通信，无法支撑组织管理整个”前端应用“的状态，虽然又不是不能用，但是要追求合理可维护性则显的捉襟见肘。</p>
<p>另外，在整个前端应用生命周期下，数据既可能来源服务端接口通信，有可能来源于用户的交互操作，还有可能来源与组件之间的通信变更等，依托”绑定器“，不同流向的数据不断双向交织，并且如“化学反应”般不断产生“次生”数据，随着应用逐渐壮大的同时，形成的一张极其庞大的数据“网”笼罩着前端开发者，应用也变得越来越难以维护，开发者顿时失去了 MMVM 分层模式带来的舒适的开发体验，前端应用似乎也迎来了生命周期的”软件危机“，变的危如累卵，应用的故障将在任何时候任何地方变的一触即发。</p>
<p>如何再次贯彻 MV* 的模式思想？是否有办法再次将整个前端应用如”上帝视角“般的分层？前端开发者如何再次破局，突破瓶颈，拯救”软件危机“？</p>
<a id="more"></a>
<h1 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a><a href="https://facebook.github.io/flux/" target="_blank" rel="noopener">Flux</a></h1><p>答案是肯定的，就在彼时，“状态管理”的思想横空出世也顺利成章（其实万变不离其宗，依然是编程模式，依然是分层的思想），将前端应用着实变成了一部“状态机”，管理好状态，即是管理好了应用。</p>
<p>依然是前端界风向标 <code>Facebook</code> 首当其冲，引入经典的编程思想，在前端生态提出了 <code>Flux</code> 设计思想, 「状态管理」也由此慢慢在前端生态大行其道，可谓一发不可收拾， <a href="https://redux.js.org/" target="_blank" rel="noopener">redux</a>、<a href="https://mobx.js.org/README.html" target="_blank" rel="noopener">mobx</a>、<a href="https://dvajs.com/" target="_blank" rel="noopener">dvajs</a>、<a href="https://rematchjs.org/" target="_blank" rel="noopener">rematchjs</a> 、 <a href="https://vuex.vuejs.org/" target="_blank" rel="noopener">vuex</a> 等优秀的状态管理方案，也如雨后春笋般纷纷涌现，成为前端开发者的福音。</p>
<img src="/2020/11/29/Hello-State/flux.jpg" title="This is flux an image">
<ul>
<li>View： 视图层</li>
<li>Action（动作）：视图层发出的消息（比如mouseClick）</li>
<li>Dispatcher（派发器）：用来接收Actions、执行回调函数</li>
<li>Store（数据层）：用来存放应用的状态，一旦发生变动，就提醒Views要更新页面</li>
</ul>
<p>用户访问 <code>View</code>, <code>View</code> 发出用户的 <code>Action</code>, <code>Dispatcher</code> 收到 <code>Action</code>, 要求 <code>Store</code> <code>进行相应的更新，可能是从服务端获取新数据，可能是从其他组件获取其他组件数据，Store</code> 根据一系列业务逻辑更新后，发出一个 <code>“change”</code> 事件， <code>View</code> 收到 <code>“change”</code> 事件后，最终呈现更新后的 <code>View</code>.<br>整个应用改变的过程，数据永远来源于 <code>Store</code>, 形成<strong>单一数据源</strong>，有效的将交织的数据流梳理清理，不用去管数据流在 <code>Store</code> 前是什么，导致应用突变的逻辑永远只存在 <code>Store</code> 中，开发只需要关注 <code>Store</code> 就能有效的洞察应用的改变逻辑，应用的可维护性得到了大大跃升。<br>对于开发者过度分离，导致 <code>Store</code> 过于臃肿，完全可以模块化 <code>Store</code> 后，通过与组件的生命周期保持同步，实现 <code>Store</code> 模块的动态异步的加载与卸载<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue CLI "SFC" Example</span></span><br><span class="line">src</span><br><span class="line">├── components <span class="comment">// 通用组件</span></span><br><span class="line">├── container <span class="comment">// 容器组件</span></span><br><span class="line">│   ├── index.vue <span class="comment">// App.vue</span></span><br><span class="line">│   ├── Hello <span class="comment">// Hello 组件</span></span><br><span class="line">│   │   ├── components <span class="comment">// Hello 组件独有子组件</span></span><br><span class="line">│   │   │   └── ...</span><br><span class="line">│   │   ├── api <span class="comment">// Hello 组件独有 api</span></span><br><span class="line">│   │   ├── store <span class="comment">// Hello 组件独有的状态，为了将状态从 vm  中二次分层，并且保持与 vm 生命周期同步，动态注册卸载</span></span><br><span class="line">│   │   └── index.vue <span class="comment">// Hello 组件 vm</span></span><br><span class="line">│   └── ... <span class="comment">// other compoents</span></span><br><span class="line">├── store <span class="comment">// 状态模块（状态实例的初始化以及全局等需要共享的状态）</span></span><br><span class="line">├── service <span class="comment">// 网络服务 (通用的 api、白名单配置以及 请求封装)</span></span><br><span class="line">├── settings <span class="comment">// 程序设置</span></span><br><span class="line">├── utils <span class="comment">// 工具</span></span><br><span class="line">├── mixins <span class="comment">// 混入</span></span><br><span class="line">├── main.js <span class="comment">//程序初始化入口</span></span><br><span class="line">└── ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * store 的异步加载:</span></span><br><span class="line"><span class="comment"> * 1. https://vuex.vuejs.org/guide/modules.html#dynamic-module-registration</span></span><br><span class="line"><span class="comment"> * 2. https://medium.com/<span class="doctag">@arliber</span>/vuex-next-steps-namespaces-and-dynamic-modules-92ea23a0ee9a</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><p>一个原汁原味的 <a href="https://facebook.github.io/flux/" target="_blank" rel="noopener">Flux</a> 例子</p>
<h2 id="Dispatch-Actions"><a href="#Dispatch-Actions" class="headerlink" title="Dispatch Actions"></a>Dispatch Actions</h2><ol>
<li><p>初始化派发器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Facebook Dispatcher Library.</span></span><br><span class="line"><span class="comment">// see: https://facebook.github.io/flux/docs/dispatcher</span></span><br><span class="line"><span class="keyword">var</span> AppDispatcher = <span class="keyword">new</span> Dispatcher();</span><br></pre></td></tr></table></figure>
</li>
<li><p>页面中有个对列表新增一个 item 的按钮</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123; <span class="keyword">this</span>.createNewItem &#125;&gt;New Item&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>按钮上绑定了一个点击事件 <code>createNewItem</code> ，发送一个 <code>new-item</code> 的 <code>&quot;action&quot;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">createNewItem: <span class="function"><span class="keyword">function</span>(<span class="params"> evt </span>) </span>&#123;</span><br><span class="line">    AppDispatcher.dispatch(&#123;</span><br><span class="line">        actionName: <span class="string">'new-item'</span>,</span><br><span class="line">        newItem: &#123; <span class="attr">name</span>: <span class="string">'Stan'</span> &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Store-Responds"><a href="#Store-Responds" class="headerlink" title="Store Responds"></a>Store Responds</h2><ol>
<li><p>列表 Store</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ListStore = &#123;</span><br><span class="line">    items: []</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>派发器上注册一个响应的处理器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">AppDispatcher.register( <span class="function"><span class="keyword">function</span>(<span class="params"> payload </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>( payload.actionName ) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'new-item'</span>:</span><br><span class="line">            ListStore.items.push( payload.newItem );</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">				……</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>至此，视图可以通过派发器触发 <code>Store</code> 更新.</p>
<h2 id="Store-Emits-Event"><a href="#Store-Emits-Event" class="headerlink" title="Store Emits Event"></a>Store Emits Event</h2><blockquote>
<p>Can  use <a href="http://notes.jetienne.com/2011/03/22/microeventjs.html" target="_blank" rel="noopener">MicroEvent.js</a> this is easy</p>
</blockquote>
<p>接下来就是在 <code>Store</code> 中处理具体的业务逻辑，那么最终需要再触发 <code>View</code> 更新。<br>现在很多优秀的状态管理方案，如 <code>Redux</code>, <code>Vuex</code> 等已经底层实现自动触发视图更新，只需要在初始化应用的时候去将应用于你的 <code>Store</code> 绑定即可, 原理其实类似 <code>jQuery</code> 时代的 <code>trigger</code> .</p>
<ol>
<li><p>赋予 <code>Store</code> 发送事件的能力</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">MicroEvent.mixin( ListStore );</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Store</code> 数据更新后同步发送 <code>change</code> 事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'new-item'</span>:</span><br><span class="line">            ListStore.items.push( payload.newItem );</span><br><span class="line">            <span class="comment">// Tell the view store changed!</span></span><br><span class="line">            ListStore.trigger( <span class="string">'change'</span> );</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="View-Responds"><a href="#View-Responds" class="headerlink" title="View Responds"></a>View Responds</h2><ol>
<li><p>组件初始化订阅 <code>change</code> 事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">componentDidMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ListStore.bind( <span class="string">'change'</span>, <span class="keyword">this</span>.listChanged );</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>组件初始化注销监听 <code>change</code> 事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">componentWillUnmount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ListStore.unbind( <span class="string">'change'</span>, <span class="keyword">this</span>.listChanged );</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>change</code> 事件只做一件事情，触发组件视图更新</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">listChanged: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.forceUpdate();</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>React jsx render</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Remember, ListStore is global!</span></span><br><span class="line">        <span class="keyword">var</span> items = ListStore.getAll();</span><br><span class="line">        <span class="comment">// Build list items markup by looping</span></span><br><span class="line">        <span class="comment">// over the entire list</span></span><br><span class="line">        <span class="keyword">var</span> itemHtml = items.map( <span class="function"><span class="keyword">function</span>(<span class="params"> listItem </span>) </span>&#123;</span><br><span class="line">            <span class="comment">// "key" is important, should be a unique</span></span><br><span class="line">            <span class="comment">// identifier for each list item</span></span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;</span> <span class="attr">listItem.id</span> &#125;&gt;</span></span></span><br><span class="line"><span class="xml">                &#123; listItem.name &#125;</span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &#123; itemHtml &#125;</span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">this.createNewItem</span> &#125;&gt;</span>New Item<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="One-More-Things"><a href="#One-More-Things" class="headerlink" title="One More Things"></a>One More Things</h2><p><code>actions</code> 可以统一的组织，一个 <code>store</code> 可以有许多 <code>actions</code><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ListActions = &#123;</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params"> item </span>) </span>&#123;</span><br><span class="line">        AppDispatcher.dispatch(&#123;</span><br><span class="line">            eventName: <span class="string">'new-item'</span>,</span><br><span class="line">            newItem: item</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// other actions...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<hr>
<h1 id="End-Thanks"><a href="#End-Thanks" class="headerlink" title="End, Thanks!"></a>End, Thanks!</h1><p>现如今众多的状态管理方案以其「丰富的<code>API</code>」以及「语法糖」设计, 开箱即用，帮助开发者保证了高效快速开发的同时依然可以随心所欲的对应用编程合理地分层，当然，凡事过犹不及，对于程序的分层设计、状态管理也是一样的，需要开发者在实际项目开发中三思后实施。</p>
<p>至此，碎碎念地表达了拥抱 <code>State Management</code>，如有不当，恭请指正～。</p>
]]></content>
      <categories>
        <category>Chat Aimlessly</category>
      </categories>
      <tags>
        <tag>get started</tag>
        <tag>web</tag>
        <tag>state</tag>
      </tags>
  </entry>
</search>
